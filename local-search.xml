<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>全链路灰度</title>
    <link href="/2024/02/02/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6/"/>
    <url>/2024/02/02/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>全链路灰度是一个很基础架构的项目，在我看来，能独立完成全链路灰度的方案设计和代码编写，那基础架构算是入门了。</p><span id="more"></span><p>全链路灰度的实现有很多方案，比如大火的 service mesh，通过修改容器的iptable来实现流量的拦截和转发，可以说这是终极的解决方案，真正实现代码 0 侵入。<br>这种方式优点明显缺点也明显，最关键的就是复杂度和性能。</p><p>当然还有其他的实现方式，比如在入口流量染色，在调用时根据流量路由。<br>本文讲的就是这种。</p><h1 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h1>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于mmap的存储方案</title>
    <link href="/2024/02/01/%E5%9F%BA%E4%BA%8Emmap%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/"/>
    <url>/2024/02/01/%E5%9F%BA%E4%BA%8Emmap%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>技术服务于业务，选择一种技术要看这个技术是不适合业务需求。<br>mmap内存映射的文件存储，是一项典型的中间件技术，一般的业务开发是想不到这种做法的。</p><span id="more"></span><p>我们这次的业务场景是，根据上游数据计算出当前状态并保存。上游的推送速度大约是 1.5 万/s，计算结果单条 2kb 左右，而且有 5 台这样的服务器。<br><img src="/2024/02/01/%E5%9F%BA%E4%BA%8Emmap%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91.png" alt="业务逻辑"><br>这是一个典型的计算密集型系统。同时需要预存大量用于计算的数据。计算结果具备时间相关性，一般只会更新最后一条数据。</p><p>为什么不存redis？</p><ol><li>性能<br>redis的qps 在十万左右。5台形态服务器，均值QPS在1万3，峰值按2倍计算，是超过10万的。当然可以使用批处理来优化，但是这里还是会有不少的网络io开销，攒批的话，本地势必也需要多用很多内存来存储数据。</li><li>代码复杂度，每一个要查形态的服务，都需要再接入一个redis的配置。</li><li>内存很贵，但是硬盘很便宜</li><li>带宽开销</li><li>模型我不喜欢<br>Do not communicate by sharing memory; instead, share memory by communicating.<br>不要通过共享内存来通信，⽽应通过通信来共享内存。</li></ol><p>所以最佳方案其实就是写本地存储，通过对外暴露接口来提供数据。</p><p>写本地存储本质上就是要写一个简易的数据库。方案也有很多，</p><ol><li>写堆内存</li><li>追加写文件</li><li>mmap 内存映射</li></ol><p>写堆内存会消耗大量的内存空间，追加写文件在需要读的时候又会涉及多次内存复制。   </p><p>那么为什么要使用mmap呢</p><ol><li>性能<br>直接使用本地内存，没有IO开销，性能最优。<br>使用的是堆外内存，减少GC的压力。<br>如果再能结合sendfile，性能可以再上一个台阶。</li><li>数据安全<br>理论上应用重启不会丢数据，除非操作系统宕机，操作系统宕机的概率很小，而且就算宕机，理论上只会丢30秒的数据。</li><li>内存稳定<br>5分K实际存储超过5个G的数据，盘前和盘后使用的内存基本一致。这里直接利用了操作系统刷新脏页的机制。</li></ol><p><img src="/2024/02/01/%E5%9F%BA%E4%BA%8Emmap%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/image.png" alt="内存规划"><br>我把一个文件映射到内存，然后给这个文件做区域划分。 1 行是 4 kb，足够承载我们一条 2 kb 的数据，一只股票一条要 78 个点位，就按顺序一路下来。第一支股票 0-78，第二只 79-157，以此类推。</p><p>接下来就到了代码编写<br>有一位大师曾经说过，任何计算机问题都可以通过增加一层来解决。我们写代码也是这样，尽量不要写面条代码，要做好层与层之间的隔离。<br>写这套代码的时候，我们也是，首先应该写一个面向底层的代码。<br>对底层来说，最重要的就是 read 和 write 两个方法，参数应该是 byte数组，这样写的代码会更具有通用性，更容易被复用。<br>面向底层的代码缺点就是不方便使用，那么我们还应该写一个中间层，面向上层应用，同样也是 read 和 write 两个方法，但是入参就是上层所使用的对象了。这样上层如果不想使用这个方案了，也只需要修改中间层的代码，不用改整个业务逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 面向底层的文件按页读写，不要直接对业务暴露</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-27 21:31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MmapContainer</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 映射的文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String mappedFileStr;<br>    <span class="hljs-keyword">private</span> File mappedFile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 总字节数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long totalByte;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 总页数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long totalPage;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每页字节数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer pageSize = <span class="hljs-number">4</span> * <span class="hljs-number">1024</span>;       <span class="hljs-comment">// 4k</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Mapping 列表</span><br><span class="hljs-comment">     * 默认每 1gb 增加一个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;MappedByteBuffer&gt; mappedByteBufferList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><br>    <span class="hljs-keyword">private</span> Long sizePerFile = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024L</span>;      <span class="hljs-comment">// 1Gb</span><br>    <span class="hljs-keyword">private</span> Long pagePerFile = sizePerFile / pageSize;      <span class="hljs-comment">// 1Gb/pageSize</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock(<span class="hljs-keyword">false</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String LINE_SEPARATOR = System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] LINE_SEPARATOR_BYTE = LINE_SEPARATOR.getBytes(StandardCharsets.UTF_8);<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MmapContainer</span><span class="hljs-params">(String mappedFileStr, Long totalPage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mappedFileStr = mappedFileStr;<br>        <span class="hljs-keyword">this</span>.mappedFile = <span class="hljs-keyword">new</span> File(mappedFileStr);<br>        <span class="hljs-keyword">this</span>.totalPage = totalPage;<br>        <span class="hljs-keyword">this</span>.totalByte = totalPage * pageSize;<br>    &#125;<br><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> mappedCount = (<span class="hljs-keyword">int</span>) Math.ceil((<span class="hljs-keyword">double</span>) totalPage / pagePerFile);<br>        log.info(<span class="hljs-string">&quot;init: mappedCount: &quot;</span> + mappedCount);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mappedCount; i++) &#123;<br>            <span class="hljs-keyword">try</span> (FileChannel fileChannel = FileChannel.open(Paths.get(mappedFile.getPath()),<br>                    StandardOpenOption.CREATE,<br>                    StandardOpenOption.READ,<br><span class="hljs-comment">//                StandardOpenOption.TRUNCATE_EXISTING,</span><br>                    StandardOpenOption.WRITE)) &#123;<br>                MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, sizePerFile * i, sizePerFile);<br>                mappedByteBufferList.add(mappedByteBuffer);<br>            &#125;<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;init 结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 解除映射</span><br>        unmap();<br>        <span class="hljs-comment">// 删除文件</span><br><span class="hljs-comment">//        mappedFile.deleteOnExit();</span><br>        <span class="hljs-keyword">if</span> (mappedFile.exists()) &#123;<br>            mappedFile.delete();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;删除文件 &#123;&#125; 结果:&#123;&#125;&quot;</span>, mappedFile.getName(), !mappedFile.exists());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写一页数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(Integer page, <span class="hljs-keyword">byte</span>[] data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (page &gt; totalPage) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(<span class="hljs-string">&quot;超过总页数，写失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data.length &gt; pageSize) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(<span class="hljs-string">&quot;写入内容超过一页容量&quot;</span>);<br>        &#125;<br>        Integer fileIndex = getFileIndex(page);<br>        Integer pageIndex = getPageIndex(page);<br>        ByteBuffer slice = mappedByteBufferList.get(fileIndex).slice();<br>        slice.position(pageIndex * pageSize);<br>        <span class="hljs-keyword">int</span> length = data.length;<br>        slice.put(ByteUtil.intToBytes(length));     <span class="hljs-comment">// 一定是4个字节</span><br>        slice.put(data);<br>        slice.put(LINE_SEPARATOR_BYTE);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读一页数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] read(Integer page) &#123;<br>        <span class="hljs-keyword">if</span> (page &gt; totalPage) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(<span class="hljs-string">&quot;超过总页数，读失败&quot;</span>);<br>        &#125;<br>        Integer fileIndex = getFileIndex(page);<br>        Integer pageIndex = getPageIndex(page);<br>        ByteBuffer slice = mappedByteBufferList.get(fileIndex).slice();<br>        slice.position(pageIndex * pageSize);<br>        <span class="hljs-keyword">byte</span>[] length = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">4</span>];<br>        slice.get(length);<br>        <span class="hljs-keyword">int</span> dataLength = ByteUtil.bytesToInt(length);<br>        <span class="hljs-keyword">if</span> (dataLength == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        slice.position(pageIndex * pageSize + <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[dataLength];<br>        slice.get(data);<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取所在映射的下标</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getFileIndex</span><span class="hljs-params">(Integer page)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.toIntExact(page / pagePerFile);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取映射对应的行数偏移量</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getPageIndex</span><span class="hljs-params">(Integer page)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.toIntExact(page % pagePerFile);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * copy from  FileChannelImpl#unmap(私有方法)</span><br><span class="hljs-comment">     * 解除map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unmap</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (MappedByteBuffer mappedByteBuffer : mappedByteBufferList) &#123;<br>                <span class="hljs-keyword">if</span> (mappedByteBuffer == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                mappedByteBuffer.force();<br>                Cleaner cl = ((DirectBuffer) mappedByteBuffer).cleaner();<br>                <span class="hljs-keyword">if</span> (cl != <span class="hljs-keyword">null</span>) &#123;<br>                    cl.clean();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>面向上层的代码设计到一些公司业务，所以不贴了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC线程池和Tomcat线程池</title>
    <link href="/2023/12/01/JUC%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8CTomcat%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2023/12/01/JUC%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8CTomcat%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p>这篇主要讲一下JUC线程池和Tomcat线程池的使用。</p><span id="more"></span><p>简单的讲，<br>JUC 线程池的工作过程是，优先使用核心线程数，然后填充队列，如果队列填满了，再启用最大线程数。<br>Tomcat 线程池则是，优先使用核心线程数，然后再使用最大线程数，如果满了，再填充队列。<br>所以 JUC 线程池适合计算密集型的任务， Tomcat线程池则适合IO密集型的任务。</p><p>JUC 线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">threadPoolExecutor = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>    <span class="hljs-number">4</span>,<br>    <span class="hljs-number">32</span>,<br>    <span class="hljs-number">1L</span>,<br>    TimeUnit.MINUTES,<br>    taskQueue,<br>    tf, <span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br><br></code></pre></td></tr></table></figure><p>Tomcat 线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">tomcat创建线程池<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>  internalExecutor = <span class="hljs-keyword">true</span>;<br>  <span class="hljs-comment">// 任务队列和普通的队列有所区别，后续分析 </span><br>  TaskQueue taskqueue = <span class="hljs-keyword">new</span> TaskQueue();<br>  <span class="hljs-comment">// 线程工厂用于创建线程  本地项目name=http-nio-port-exec-序号</span><br>  TaskThreadFactory tf = <span class="hljs-keyword">new</span> TaskThreadFactory(getName() + <span class="hljs-string">&quot;-exec-&quot;</span>, daemon, getThreadPriority());<br>  <span class="hljs-comment">// 创建线程池，注意这个ThreadPoolExecutor和java.util.concurrent包下的ThreadPoolExecutor有所区别</span><br>  executor = <span class="hljs-keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="hljs-number">60</span>, TimeUnit.SECONDS,taskqueue, tf);<br>  <span class="hljs-comment">// 给任务队列设置线程池，用于后续任务来了判断是创建线程执行还是将线程添加到任务队列</span><br>  taskqueue.setParent( (ThreadPoolExecutor) executor);<br>&#125;<br><br><br>threadPoolExecutor = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">32</span>,<br>    <span class="hljs-number">1L</span>,<br>    TimeUnit.MINUTES,<br>    taskQueue,<br>    tf, <span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/monianxd/p/16579339.html">参考文章</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多迭代并行经验</title>
    <link href="/2023/10/04/%E5%A4%9A%E8%BF%AD%E4%BB%A3%E5%B9%B6%E8%A1%8C%E7%BB%8F%E9%AA%8C/"/>
    <url>/2023/10/04/%E5%A4%9A%E8%BF%AD%E4%BB%A3%E5%B9%B6%E8%A1%8C%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>多个迭代并行开发，一种可行的办法是使用泳道，把一个迭代作为一个泳道隔离开来。但是如果受限于基础设施和成本，只有一套开发环境，势必会需要合并到同一个分支。这个分支，如dev，它的版本号全部是 dev0.0.1-SNAPSHOT，不因为有新迭代合并上来而改变。</p><p>合并到一个分支会遇到代码冲突问题。业务代码冲突是无法解决的，这个只能从架构设计的角度，尽量让每次迭代不要修改同一个文件，除了业务代码还有一些公共文件，例如 pom.xml </p><p>首先项目要有版本号，这样在本地开发时可以使用本次迭代的版本号，这样别人在公共分支合并代码推包不会影响你的本地分支。在合并到公共分支后，pom.xml 合并冲突的问题就需要解决了。</p><p>这里分情况讨论。pom.xml 会有哪些冲突。</p><span id="more"></span><h1 id="parent-version-version"><a href="#parent-version-version" class="headerlink" title="parent.version,version"></a>parent.version,version</h1><p>git 合并的原理是：首先有一个 公共的祖先分支(ancestor),当前分支(current),其它分支(other), 当这三个不一样时，会使用特殊标记字符来标识。<br>底层是调用 git merge-file 命令，传入三个文件。<br>参考:  <a href="https://cloud.tencent.com/developer/section/1138705">https://cloud.tencent.com/developer/section/1138705</a></p><p>这样如果 parent.version 和 version 冲突，我们知道肯定是要使用当前分支的版本号（dev0.0.1-SNAPSHOT）。<br>要实现自定义合并策略，我们需要借住 git 提供的自定义合并驱动(custom merge driver)<br>简单的说</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span> 执行下面两行命令<br>git config <span class="hljs-params">--global</span> merge.<span class="hljs-keyword">version</span>_current.name <span class="hljs-string">&quot;choose current when parent version and version conflict&quot;</span><br>git config <span class="hljs-params">--global</span> merge.<span class="hljs-keyword">version</span>_current.driver <span class="hljs-string">&quot;/home/relengxing/app/version_current %O %A %B&quot;</span><br><br><br><span class="hljs-string">//</span> 根目录添加 <span class="hljs-string">.gitattributes</span> 文件<br><span class="hljs-string">//</span> 复制以下内容到文件<br>pom.xml merge=<span class="hljs-keyword">version</span>_current<br><br><span class="hljs-string">//</span> 当 parent.<span class="hljs-keyword">version</span> 和 <span class="hljs-keyword">version</span> 有冲突时，会直接使用当前分支的版本的内容<br></code></pre></td></tr></table></figure><p>当合并时，所有pom.xml 的合并策略会走 version_current 这段代码。<br>源码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;encoding/xml&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;github.com/vifraa/gopom&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;os/exec&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//ancestor := flag.String(&quot;ancestor&quot;, &quot;&quot;, &quot;祖先的&quot;)</span><br>    <span class="hljs-comment">//current := flag.String(&quot;current&quot;, &quot;&quot;, &quot;当前的&quot;)</span><br>    <span class="hljs-comment">//other := flag.String(&quot;other&quot;, &quot;&quot;, &quot;其他的&quot;)</span><br><br>    ancestor := os.Args[<span class="hljs-number">1</span>]<br>    current := os.Args[<span class="hljs-number">2</span>]<br>    other := os.Args[<span class="hljs-number">3</span>]<br>    ancestorBuf, _ := os.ReadFile(ancestor)<br>    currentBuf, _ := os.ReadFile(current)<br>    otherBuf, _ := os.ReadFile(other)<br>    <span class="hljs-comment">//ancestorStr := string(ancestorBuf)</span><br>    <span class="hljs-comment">//currentStr := string(currentBuf)</span><br>    otherStr := <span class="hljs-keyword">string</span>(otherBuf)<br><br>    <span class="hljs-keyword">var</span> ancestorPom gopom.Project<br>    <span class="hljs-keyword">var</span> currentPom gopom.Project<br>    <span class="hljs-keyword">var</span> otherPom gopom.Project<br>    xml.Unmarshal(ancestorBuf, &amp;ancestorPom)<br>    xml.Unmarshal(currentBuf, &amp;currentPom)<br>    xml.Unmarshal(otherBuf, &amp;otherPom)<br><br>    <span class="hljs-keyword">var</span> parentVerion *<span class="hljs-keyword">string</span> = <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">if</span> currentPom.Parent != <span class="hljs-literal">nil</span> &amp;&amp; *currentPom.Parent.Version != *otherPom.Parent.Version &#123;<br>        parentVerion = currentPom.Parent.Version<br>    &#125;<br>    <span class="hljs-keyword">var</span> version *<span class="hljs-keyword">string</span> = <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">if</span> *currentPom.Version != *otherPom.Version &#123;<br>        version = currentPom.Version<br>    &#125;<br>    versionFmt := <span class="hljs-string">&quot;&lt;version&gt;%s&lt;/version&gt;&quot;</span><br>    <span class="hljs-keyword">if</span> parentVerion != <span class="hljs-literal">nil</span> &#123;<br>        otherStr = strings.Replace(otherStr, fmt.Sprintf(versionFmt, *otherPom.Parent.Version), fmt.Sprintf(versionFmt, *parentVerion), <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> version != <span class="hljs-literal">nil</span> &#123;<br>        otherStr = strings.Replace(otherStr, fmt.Sprintf(versionFmt, *otherPom.Version), fmt.Sprintf(versionFmt, *version), <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-comment">// 重写文件</span><br>    os.WriteFile(other, []<span class="hljs-keyword">byte</span>(otherStr), os.ModePerm)<br><br>    <span class="hljs-comment">//git merge-file -L current -L ancestor -L other $2 $1 $3</span><br><br>    cmd := exec.Command(<span class="hljs-string">&quot;git&quot;</span>, <span class="hljs-string">&quot;merge-file&quot;</span>, <span class="hljs-string">&quot;-L&quot;</span>, <span class="hljs-string">&quot;current&quot;</span>, <span class="hljs-string">&quot;-L&quot;</span>, <span class="hljs-string">&quot;ancestor&quot;</span>, <span class="hljs-string">&quot;-L&quot;</span>, <span class="hljs-string">&quot;other&quot;</span>, current, ancestor, other)<br>    out, err := cmd.CombinedOutput()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;combined out:\n%s\n&quot;</span>, <span class="hljs-keyword">string</span>(out))<br>        os.Exit(<span class="hljs-number">1</span>)<br>    &#125;<br>    fmt.Println(out)<br>    os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样就实现了，当parent version 和version 冲突时，默认选择当前分支的版本号。<br>自定义合并策略是git提供的扩展机会，也可以运用到其它地方</p><h1 id="dependency-version"><a href="#dependency-version" class="headerlink" title="dependency version"></a>dependency version</h1><p>依赖版本冲突。<br>例如有一个common包，一个是 1.0.0，一个是1.0.1, 这些其实是不需要合并到公共分支的，哪怕合并到公共分支，也是需成 dev0.0.1-SNAPSHOT的，但是这样就很不方便了。<br>正确的做法是，使用一个独立的工程来维护版本号。<br>这个项目只有一个 pom.xml，然后里面用 dependencyManagement 维护好版本号。<br>然后通过 import的方式导入，一下是springboot的方式。  </p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">复制代码</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">                <span class="hljs-comment">&lt;!-- 重要：版本号要和父模块中预定义的spring boot版本号保持一致 --&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.boot.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="dependency"><a href="#dependency" class="headerlink" title="dependency"></a>dependency</h1><p>这块如果冲突，说明是需要合并的，这块建议手动处理，没有使用自定义合并驱动了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>动态刷新导致假死.md</title>
    <link href="/2022/11/05/%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E5%AF%BC%E8%87%B4%E5%81%87%E6%AD%BB/"/>
    <url>/2022/11/05/%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E5%AF%BC%E8%87%B4%E5%81%87%E6%AD%BB/</url>
    
    <content type="html"><![CDATA[<p>动态刷新导致死锁应用假死</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;common-async-task-5012&quot; Id=232456 WAITING on java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync@39b6a50f<br>at sun.misc.Unsafe.park(Native Method)<br>-  waiting on java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync@39b6a50f<br>at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)<br>at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:967)<br>at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1283)<br>at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:727)<br>at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:494)<br>at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)<br>at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)<br>at com.sun.proxy.$Proxy156.getConnection(Unknown Source)<br>at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)<br>at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)<br>at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)<br>at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)<br>at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:101)<br>-  locked org.hibernate.boot.registry.internal.StandardServiceRegistryImpl@5daa1ec8<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)<br>-  locked org.hibernate.boot.registry.internal.StandardServiceRegistryImpl@5daa1ec8<br>at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)<br>-  locked org.hibernate.boot.registry.internal.StandardServiceRegistryImpl@5daa1ec8<br>at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.&lt;init&gt;(InFlightMetadataCollectorImpl.java:176)<br>at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:127)<br>at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1224)<br>at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1255)<br>at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)<br>at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)<br>at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:391)<br>at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:378)<br>at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)<br>at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:363)<br>at org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$698/512428725.getObject(Unknown Source)<br>at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389)<br>-  locked java.lang.String@7b65f62c &lt;---- but blocks 7565 other threads!<br>at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186)<br>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:360)<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)<br>at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)<br>at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:192)<br>at com.sun.proxy.$Proxy99.getTargetObject(Unknown Source)<br>at org.springframework.transaction.support.TransactionSynchronizationUtils$ScopedProxyUnwrapper.unwrapIfNecessary(TransactionSynchronizationUtils.java:188)<br>at org.springframework.transaction.support.TransactionSynchronizationUtils.unwrapResourceIfNecessary(TransactionSynchronizationUtils.java:71)<br>at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResourceIfPossible(TransactionSynchronizationManager.java:225)<br>at org.springframework.orm.jpa.JpaTransactionManager.doCleanupAfterCompletion(JpaTransactionManager.java:594)<br>at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1004)<br>at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:790)<br>at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)<br>at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:633)<br>at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:386)<br>at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)<br>at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)<br>at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)<br>at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)<br>at com.ak.base.ams.biz.service.impl.DelayMessageServiceImpl$$EnhancerBySpringCGLIB$$d819222.updateState(&lt;generated&gt;)<br>at com.ak.base.ams.consumeservice.service.impl.MqMessageServiceImpl.delayMessageProcess(MqMessageServiceImpl.java:733)<br>at com.ak.base.ams.consumeservice.service.impl.MqMessageServiceImpl.singlePushBelongMessage(MqMessageServiceImpl.java:695)<br>at com.ak.base.ams.consumeservice.service.impl.MqMessageServiceImpl.pushMessageSync(MqMessageServiceImpl.java:363)<br>at com.ak.base.ams.consumeservice.service.impl.MqMessageServiceImpl.pushSingleMessage(MqMessageServiceImpl.java:287)<br>at sun.reflect.GeneratedMethodAccessor317.invoke(Unknown Source)<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>at java.lang.reflect.Method.invoke(Method.java:498)<br>at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)<br>at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)<br>at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)<br>at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)<br>at org.springframework.aop.interceptor.AsyncExecutionInterceptor$$Lambda$2060/203836955.call(Unknown Source)<br>at java.util.concurrent.FutureTask.run(FutureTask.java:266)<br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)<br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)<br>at java.lang.Thread.run(Thread.java:748)<br><br>Number of locked synchronizers = 1<br>- java.util.concurrent.ThreadPoolExecutor$Worker@7c5d4e1b<br><br></code></pre></td></tr></table></figure><p>根据堆栈信息可知，项目卡在 GenericScope.invoke() 获取读锁时。说明有一个地方卡在写锁，没有释放。全文搜索这个 lock 的写锁，发现只有 destory() 时会使用写锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Throwable&gt; errors = <span class="hljs-keyword">new</span> ArrayList&lt;Throwable&gt;();<br>    Collection&lt;BeanLifecycleWrapper&gt; wrappers = <span class="hljs-keyword">this</span>.cache.clear();<br>    <span class="hljs-keyword">for</span> (BeanLifecycleWrapper wrapper : wrappers) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Lock lock = <span class="hljs-keyword">this</span>.locks.get(wrapper.getName()).writeLock();<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                wrapper.destroy();<br>            &#125;<br>            <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>            errors.add(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!errors.isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> wrapIfNecessary(errors.get(<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-keyword">this</span>.errors.clear();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">destroy</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    BeanLifecycleWrapper wrapper = <span class="hljs-keyword">this</span>.cache.remove(name);<br>    <span class="hljs-keyword">if</span> (wrapper != <span class="hljs-keyword">null</span>) &#123;<br>        Lock lock = <span class="hljs-keyword">this</span>.locks.get(wrapper.getName()).writeLock();<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            wrapper.destroy();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">this</span>.errors.remove(name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.callback == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.name) &#123;<br>        Runnable callback = <span class="hljs-keyword">this</span>.callback;<br>        <span class="hljs-keyword">if</span> (callback != <span class="hljs-keyword">null</span>) &#123;<br>            callback.run();<br>        &#125;<br>        <span class="hljs-keyword">this</span>.callback = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">this</span>.bean = <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码可以看出，destory() 会先调用 lock 获取写锁。然后调用 synchronized (this.name)。destory是在nacos刷新配置的时候调用的。<br>再从堆栈信息来看。在事务提交时，调用了getBean，和 invoke。<br>简化一下：<br>thread 1  调用 destroy获取写锁，获取 synchronized<br>thread 2  调用 getBean获取 synchronized ，调用 invoke 获取读锁<br>两个线程死锁了。<br>结论。这次的程序假死，是在事务执行期间，改动了Nacos配置，触发了动态刷新的destory方法，导致一个线程在create Bean 一个线程在 destory Bean，导致死锁其他业务线程也被卡住。<br>解决方法是删除数据库的动态刷新配置。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GORM分页插件</title>
    <link href="/2022/08/29/GORM_page/"/>
    <url>/2022/08/29/GORM_page/</url>
    
    <content type="html"><![CDATA[<p>自己封装了一个GORM的分页插件</p><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> paginate<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用方法</span><br><span class="hljs-comment">var demo entity.Demo</span><br><span class="hljs-comment">pageReq := paginate.PageReq&#123;Page: 1, PageSize: 10&#125;</span><br><span class="hljs-comment">pageResp, err := paginate.Page(db, &amp;pageReq, &amp;demo)</span><br><span class="hljs-comment">for i, i2 := range pageResp.Data &#123;</span><br><span class="hljs-comment">fmt.Println(i)</span><br><span class="hljs-comment">fmt.Println(i2)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-comment">// PageResp 分页返回值</span><br><span class="hljs-comment">// data: 使用范型，返回值是数组</span><br><span class="hljs-keyword">type</span> PageResp[T any] <span class="hljs-keyword">struct</span> &#123;<br>TotalCount <span class="hljs-keyword">int64</span> <span class="hljs-string">`json:&quot;total_count&quot;`</span> <span class="hljs-comment">// 总条数</span><br>TotalPage  <span class="hljs-keyword">int</span>   <span class="hljs-string">`json:&quot;total_page&quot;`</span>  <span class="hljs-comment">// 总页数</span><br>Data       []T   <span class="hljs-string">`json:&quot;data&quot;`</span>        <span class="hljs-comment">// 消息实体</span><br>PageSize   <span class="hljs-keyword">int</span>   <span class="hljs-string">`json:&quot;page_size&quot;`</span>   <span class="hljs-comment">// 每页条数</span><br>Page       <span class="hljs-keyword">int</span>   <span class="hljs-string">`json:&quot;page&quot;`</span>        <span class="hljs-comment">// 当前页数</span><br>&#125;<br><br><span class="hljs-comment">// PageReq 分页输入参数</span><br><span class="hljs-keyword">type</span> PageReq <span class="hljs-keyword">struct</span> &#123;<br>Page     <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;page&quot; form:&quot;page&quot;`</span>           <span class="hljs-comment">// 第几页</span><br>PageSize <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;page_size&quot; form:&quot;page_size&quot;`</span> <span class="hljs-comment">// 每页条数</span><br>Sort     <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;sort&quot; form:&quot;sort&quot;`</span>           <span class="hljs-comment">// 排序</span><br>&#125;<br><br><span class="hljs-comment">// Page 分页插件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Page</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(db *gorm.DB, pageReq *PageReq, model T)</span> <span class="hljs-params">(*PageResp[T], error)</span></span> &#123;<br><span class="hljs-keyword">var</span> (<br>err    error<br>count  <span class="hljs-keyword">int64</span><br>result PageResp[T]<br>data   []T<br>)<br>err = db.Model(model).Count(&amp;count).Error<br>fmt.Println(count)<br><span class="hljs-keyword">if</span> err := db.Model(model).Scopes(paginate(pageReq)).Scan(&amp;data).Error; err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>result.TotalCount = count<br>result.Data = data<br>result.Page = pageReq.Page<br>result.PageSize = pageReq.PageSize<br>result.TotalPage = <span class="hljs-keyword">int</span>(math.Ceil(<span class="hljs-keyword">float64</span>(count) / <span class="hljs-keyword">float64</span>(pageReq.PageSize)))<br><span class="hljs-keyword">return</span> &amp;result, err<br>&#125;<br><br><span class="hljs-comment">// 使用方法：db.Scopes(Paginate(pageReq)).Find(&amp;users)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">paginate</span><span class="hljs-params">(pageReq *PageReq)</span> <span class="hljs-title">func</span><span class="hljs-params">(db *gorm.DB)</span> *<span class="hljs-title">gorm</span>.<span class="hljs-title">DB</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(db *gorm.DB)</span> *<span class="hljs-title">gorm</span>.<span class="hljs-title">DB</span></span> &#123;<br><span class="hljs-keyword">var</span> (<br>page     = pageReq.Page<br>pageSize = pageReq.PageSize<br>)<br><span class="hljs-keyword">if</span> page == <span class="hljs-number">0</span> &#123;<br>page = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> pageSize &gt; <span class="hljs-number">1000</span>:<br>pageSize = <span class="hljs-number">1000</span><br><span class="hljs-keyword">case</span> pageSize &lt;= <span class="hljs-number">0</span>:<br>pageSize = <span class="hljs-number">10</span><br>&#125;<br>offset := (page - <span class="hljs-number">1</span>) * pageSize<br><span class="hljs-keyword">return</span> db.Offset(offset).Limit(pageSize)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录:一次应用假死排查.md</title>
    <link href="/2022/03/08/%E8%AE%B0%E5%BD%95-%E4%B8%80%E6%AC%A1%E5%BA%94%E7%94%A8%E5%81%87%E6%AD%BB%E6%8E%92%E6%9F%A5-md/"/>
    <url>/2022/03/08/%E8%AE%B0%E5%BD%95-%E4%B8%80%E6%AC%A1%E5%BA%94%E7%94%A8%E5%81%87%E6%AD%BB%E6%8E%92%E6%9F%A5-md/</url>
    
    <content type="html"><![CDATA[<p>记录:一次应用假死排查</p><span id="more"></span><h2 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h2><p>最近几天，发现测试环境经常假死。复现需要很久的时间，一般得过一个晚上。</p><h2 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h2><p>正常情况，应用会每隔几秒注册到Redis上。异常后发现Redis上没有注册信息，但是有一些其他的工作线程会有正常的工作信息输出。<br>代码逻辑为，新建一个线程，然后线程中会注册到Redis。<br>伪代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread th = <span class="hljs-keyword">new</span> Thread()&#123;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>    register();<br>    <span class="hljs-comment">// 一些业务处理</span><br>    Thread.sleep();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段假死的代码已经在线上运行了一年了，改动极少，按理来说应该很问题了，而且业务逻辑很简单。</p><h2 id="排查："><a href="#排查：" class="headerlink" title="排查："></a>排查：</h2><p>第一反应，先看看CPU,内存等信息是否正常。经检查，服务器的CPU,内存并无异常。<br>然后使用 arthas 连接应用，看应用工作情况<br>dashboard如下<br><img src="/2022/03/08/%E8%AE%B0%E5%BD%95-%E4%B8%80%E6%AC%A1%E5%BA%94%E7%94%A8%E5%81%87%E6%AD%BB%E6%8E%92%E6%9F%A5-md/dashboard.jpg" alt="步骤"><br>如图所示,gc、内存、CPU占用都极其正常。但是有大量 TIMED_WAITING 的线程。<br>使用 thead -b 未发现死锁的情况。</p><p>这时想到看一下我关注的线程到底在干嘛，堆栈信息如下<br><img src="/2022/03/08/%E8%AE%B0%E5%BD%95-%E4%B8%80%E6%AC%A1%E5%BA%94%E7%94%A8%E5%81%87%E6%AD%BB%E6%8E%92%E6%9F%A5-md/thread.jpg" alt="步骤"><br>发现是在从 Redis 连接池获取 Connection。<br>但是一直在这里没有动静，没有超时。这里随后查看了配置，发现这里设置的是 -1,也就是永不超时。事实上这里设置超时时间也不能解决问题。<br>随后查看了Redis服务器的信息，发现也没有什么异常。<br>而且其他应用也都在使用这台Redis服务，所以推断还是应用的问题。在应用服务器使用 netstat 查看连接信息，发现有100个 redis 的连接处于 established。数量和我们配置的数量是匹配的。</p><p>内心OS：连接池获取连接一直阻塞，说明连接池没有就绪的连接，但是实际上已经创建到上限了，说明连接一直没有归还，难道有慢查询？但是从Redis服务端来看，并没有发现慢查询，而且我确定这里设置了超时时间3s。<br>暂时没有发现，但是我们能确定这次不是玄学问题，肯定和Redis连接池有关系。</p><p>我们是使用的 RedisTemplate，按理来说这种框架无数人验证过了，不应该会有连接使用完不归还的情况。</p><p>然后开始看源码，发现 RedisTemplate 大部分命令都是有释放的。<br>但是 scan 命令不会。<br><code>使用 scan 命令切记关闭 Cursor ！！！，否则连接不会释放，导致异常（Could not get a resource from the pool）</code><br>事实上我们的代码也有调用 cursor.close() 方法，但是没有在finally 块中，然后中间如果抛出异常就没有运行 close 代码。到最后就出现了连接池耗尽，然后一直阻塞等待的假死现象。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>动态数据源</title>
    <link href="/2021/12/17/dynamic-datasource/"/>
    <url>/2021/12/17/dynamic-datasource/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近几年 saas 很火。saas 对数据安全的要求会比较高，往往会要求每个商户，一个独立的数据库。<br>但是数据库太多，就很难进行管理和切库。</p><span id="more"></span><p>对此数据库的管理，可以使用一个系统进行存储，由DBA进行维护。而切库就是重中之重了。</p><p>这里其实有很多概念，动态数据源，远程数据源，分库分表，分布式事务等</p><p>概念说明：<br>多数据源：一个项目同时使用多个数据库。<br>动态数据源：实时获取数据源信息生成DataSource，后续可能会更改，比如按CompanyId获取数据源。<br>远程数据源：仅在启动的时候，从远程（资源配置中心）获取数据源信息，后续不会更改。</p><p>这篇文章只写<code>动态数据源</code></p><p>最底层使用的是 <code>com.baomidou</code> 的 <code>dynamic-datasource-spring-boot-starter</code><br>这是 Mybatis-Plus 作者提供的方案。该库提供了多数据源以及切库的能力。<br>我们对该方案进行的扩展，增加动态获取数据源的方法。</p><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p><code>dynamic-datasource-spring-boot-starter</code> 可以实现多数据源，所有的数据源是启动时从yaml配置文件中加载的。<br>实现原理是，在方法调用时，通过AOP拦截<code>@DS</code>注解，把预先配置好的数据源加载到线程变量中。<br>在真正使用的时候，就是使用的我们想用的数据源。</p><p>所以要实现动态数据源就是修改这个过程。</p><p>这里我定义了一个 <code>Providor</code> 这个接口有一个方法，会返回给我们具体的数据源。<br>通过重写 <code>dynamic-datasource-spring-boot-starter</code> 的 <code>determineDataSource</code>方法，在 <code>@DS</code>后面是以 <code>Providor</code> 结尾的，就会调用特定的实现方法，<br><code>Providor</code> 作为提供者，同时也是管理者，会维护DataSource的缓存。<br>所以核心其实就两步，<br>第一步：重写 <code>determineDataSource</code><br>第二步：提供 <code>Providor</code></p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="dynamic-datasource-spring-boot-starter-源码解析"><a href="#dynamic-datasource-spring-boot-starter-源码解析" class="headerlink" title="dynamic-datasource-spring-boot-starter 源码解析"></a>dynamic-datasource-spring-boot-starter 源码解析</h2><p>这里不会讲解所有的源码，只选择关键部分</p><p>看 springboot 的 starter项目，一般可直接找到 <code>AutoConfiguration</code>结尾的文件。<br>这个项目就是 <code>DynamicDataSourceAutoConfiguration</code> </p><p>先看这一段，创建了一个路由用的DataSource。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">()</span> </span>&#123;<br>    DynamicRoutingDataSource dataSource = <span class="hljs-keyword">new</span> DynamicRoutingDataSource();<br>    dataSource.setPrimary(properties.getPrimary());<br>    dataSource.setStrict(properties.getStrict());<br>    dataSource.setStrategy(properties.getStrategy());<br>    dataSource.setP6spy(properties.getP6spy());<br>    dataSource.setSeata(properties.getSeata());<br>    <span class="hljs-keyword">return</span> dataSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个DataSource 内部维护了一个 map。这个map里存储的就是实际使用的数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br></code></pre></td></tr></table></figure><p>在其抽象类 <code>AbstractRoutingDataSource</code> 中 通过  <code>determineDataSource()</code>选择数据源，再获取 connection。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    String xid = TransactionContext.getXID();<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(xid)) &#123;<br>        <span class="hljs-keyword">return</span> determineDataSource().getConnection();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        String ds = DynamicDataSourceContextHolder.peek();<br>        ds = StringUtils.isEmpty(ds) ? <span class="hljs-string">&quot;default&quot;</span> : ds;<br>        ConnectionProxy connection = ConnectionFactory.getConnection(ds);<br>        <span class="hljs-keyword">return</span> connection == <span class="hljs-keyword">null</span> ? getConnectionProxy(ds, determineDataSource().getConnection()) : connection;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么再分析 <code>determineDataSource()</code>, 分组的情况我们不讨论，普通情况下，就是从 dataSourceMap 拿一个DataSource。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">determineDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>    String dsKey = DynamicDataSourceContextHolder.peek();<br>    <span class="hljs-keyword">return</span> getDataSource(dsKey);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">(String ds)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ds)) &#123;<br>        <span class="hljs-keyword">return</span> determinePrimaryDataSource();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!groupDataSources.isEmpty() &amp;&amp; groupDataSources.containsKey(ds)) &#123;<br>        log.debug(<span class="hljs-string">&quot;dynamic-datasource switch to the datasource named [&#123;&#125;]&quot;</span>, ds);<br>        <span class="hljs-keyword">return</span> groupDataSources.get(ds).determineDataSource();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dataSourceMap.containsKey(ds)) &#123;<br>        log.debug(<span class="hljs-string">&quot;dynamic-datasource switch to the datasource named [&#123;&#125;]&quot;</span>, ds);<br>        <span class="hljs-keyword">return</span> dataSourceMap.get(ds);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (strict) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CannotFindDataSourceException(<span class="hljs-string">&quot;dynamic-datasource could not find a datasource named&quot;</span> + ds);<br>    &#125;<br>    <span class="hljs-keyword">return</span> determinePrimaryDataSource();<br>&#125;<br></code></pre></td></tr></table></figure><p>最核心的代码其实就这些，那么，我们只需要扩展这里就可以了。</p><h2 id="扩展部分-源码解析"><a href="#扩展部分-源码解析" class="headerlink" title="扩展部分 源码解析"></a>扩展部分 源码解析</h2><p><code>DynamicRoutingDataSource</code> 使用了<code>@ConditionalOnMissingBean</code><br>那么我们只需要在自己的代码里注入一个自己的 <code>DynamicRoutingDataSource</code> 就可以覆盖原方法。</p><p>源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XXDynamicRoutingDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DynamicRoutingDataSource</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PROVIDER_SUFFIX = <span class="hljs-string">&quot;Provider&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, XXDataSourceProvider&gt; providerMap;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">determineDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        String dsKey = DynamicDataSourceContextHolder.peek();<br>        <span class="hljs-keyword">if</span> (dsKey == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 会调用父类方法，返回 primary 数据库的信息</span><br>            <span class="hljs-keyword">return</span> getDataSource(<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-comment">// 指定远端的从 PROVIDER 加载</span><br>        <span class="hljs-keyword">if</span> (dsKey.endsWith(PROVIDER_SUFFIX)) &#123;<br>            XXDataSourceProvider dynamicDataSourceProvider = providerMap.get(dsKey);<br>            <span class="hljs-keyword">if</span> (dynamicDataSourceProvider == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// 未找到此 Provider，直接返回默认数据源</span><br>                <span class="hljs-keyword">return</span> getDataSource(dsKey);<br>            &#125;<br>            <span class="hljs-comment">// 调用 provider 提供的 getDataSource 方法</span><br>            <span class="hljs-keyword">return</span> dynamicDataSourceProvider.getDataSource(dsKey);<br>        &#125;<br>        <span class="hljs-comment">// 否则从原配置文件的数据库加载</span><br>        <span class="hljs-keyword">return</span> getDataSource(dsKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里很好理解，只有 <code>@DS</code>内部是以 <code>Provider</code> 这个字符串结尾的，才做特殊处理，其他的都调父类的方法。</p><p>那么 剩下的就是 XXDataSourceProvider 怎么写了。<br>这里我定义了一个接口，一个抽象类。<br>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AkDataSourceProvider</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 同时兼容多数据源（多主多从等情况）的情况</span><br><span class="hljs-comment">     * 加载数据源，并保存到内存中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSourceName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Map&lt;String, DataSource&gt; <span class="hljs-title">loadDataSources</span><span class="hljs-params">(String dataSourceName)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从内存中获取DataSource，如果内存中不存在，不会动态加载</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSourceKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">(String dataSourceKey)</span></span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象 动态数据源提供者，</span><br><span class="hljs-comment"> * 里面提供了一些方法，如果和需求不匹配，可按需重写方法</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 第一步 创建 DataSourceProperty</span><br><span class="hljs-comment"> * DataSourceProperty dataSourceProperty = new DataSourceProperty();</span><br><span class="hljs-comment"> * dataSourceProperty.setUrl(url);</span><br><span class="hljs-comment"> * dataSourceProperty.setUsername(dbInstanceInfo.getUsername());</span><br><span class="hljs-comment"> * dataSourceProperty.setPassword(dbInstanceInfo.getPassword());</span><br><span class="hljs-comment"> * dataSourceProperty.setDriverClassName(&quot;org.postgresql.Driver&quot;);</span><br><span class="hljs-comment"> * 第二步</span><br><span class="hljs-comment"> * 调用 createDataSourceMap 生成 DataSource</span><br><span class="hljs-comment"> * 第三步</span><br><span class="hljs-comment"> * 生成的 DataSource 加入到 缓存 中</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> V1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractXXDataSourceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractDataSourceProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">XXDataSourceProvider</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据源提供者自行管理数据源</span><br><span class="hljs-comment">     * 此处使用缓存框架，防止项目启动时多线程同时加载导致多次请求远程服务器和数据源频繁替换的问题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Cache&lt;String, DataSource&gt; cache = init();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化方法</span><br><span class="hljs-comment">     * 子类可以重写该方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Cache&lt;String, DataSource&gt; <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Caffeine.newBuilder()<br>                .initialCapacity(<span class="hljs-number">5</span>)        <span class="hljs-comment">// 初始化 5 个</span><br>                .maximumSize(<span class="hljs-number">100</span>)        <span class="hljs-comment">// 最大 100 个</span><br>                .build();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认实现的获取DataSource</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 如果存在 不是根据 datasourceKey 和 实际使用的 DataSource 不一样，则需要重写该方法</span><br><span class="hljs-comment">     * 例如如果是根据 companyId 做为 key</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSourceKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">(String dataSourceKey)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cache.get(dataSourceKey, key -&gt; &#123;<br>            Map&lt;String, DataSource&gt; dataSourceMap = loadDataSources(key);<br>            DataSource ds;<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;String, DataSource&gt; entry : dataSourceMap.entrySet()) &#123;<br>                ds = entry.getValue();<br>                <span class="hljs-keyword">if</span> (ds != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> ds;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据 DataSourceProperty 生成 DataSource</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSourcePropertiesMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Map&lt;String, DataSource&gt; <span class="hljs-title">createDataSourceMap</span><span class="hljs-params">(Map&lt;String, DataSourceProperty&gt; dataSourcePropertiesMap)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.createDataSourceMap(dataSourcePropertiesMap);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭旧的数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dsKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeDataSource</span><span class="hljs-params">(String dsKey, DataSource dataSource)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (dataSource != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (dataSource <span class="hljs-keyword">instanceof</span> ItemDataSource) &#123;<br>                ((ItemDataSource) dataSource).close();<br>            &#125;<br>            cache.invalidate(dsKey);<br>            <span class="hljs-comment">// 此处考虑增加 DataSourceProxy 的关闭对象方法</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个方法是框架使用的，这里返回空，这样自定义的数据源可以和配置文件的数据源隔离</span><br><span class="hljs-comment">     * 此处不禁止重写，但是如果不理解这个流程，最好不要对该方法进行重写</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, DataSource&gt; <span class="hljs-title">loadDataSources</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HashMap&lt;&gt;(<span class="hljs-number">0</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现类则需要继承抽象类并按需重写里面的方法即可。<br>比如按公司Id进行切库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">(String dataSourceKey)</span> </span>&#123;<br>    <span class="hljs-comment">// 改成从线程变量获取</span><br>    Long companyId = <span class="hljs-number">123456L</span>;<br>    DataSource dataSource = <span class="hljs-keyword">super</span>.getDataSource(String.valueOf(companyId));<br>    <span class="hljs-keyword">if</span> (dataSource != <span class="hljs-keyword">null</span>) &#123;<br>        log.info(dataSourceKey + <span class="hljs-string">&quot;切换到数据源： &quot;</span> + companyId);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dataSource;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实际加载，从远端加载数据库</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, DataSource&gt; <span class="hljs-title">loadDataSources</span><span class="hljs-params">(String dataSourceName)</span> </span>&#123;<br>    <span class="hljs-comment">// 改成从线程变量获取</span><br>    Long companyId = <span class="hljs-number">123456</span>;<br>    DataSourceProperty dataSourceProperty = loadFromRemote();<br>    Map&lt;String, DataSourceProperty&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(String.valueOf(companyId), dataSourceProperty);<br>    <span class="hljs-keyword">return</span> createDataSourceMap(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类实现了选择数据库和切换数据库。实现类则需要实现怎么从远程取数据库，怎么管理缓存。<br>抽象类只是技术交流，没有任何商业信息，或者说只是寥寥几笔的在巨人的肩膀上扩展了一下。实现类就不贴源码了。</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><ol><li>缓存要可以清理。</li><li>companyId和datasource之前其实还应该再做一层。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis插件进行数据库操作记录.md</title>
    <link href="/2021/08/30/Mybatis%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95-md/"/>
    <url>/2021/08/30/Mybatis%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95-md/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis插件进行数据库操作记录"><a href="#Mybatis插件进行数据库操作记录" class="headerlink" title="Mybatis插件进行数据库操作记录"></a>Mybatis插件进行数据库操作记录</h1><h2 id="需求介绍"><a href="#需求介绍" class="headerlink" title="需求介绍"></a>需求介绍</h2><p>先介绍一下需求，<br>我们需要对用户的一些操作进行记录，比如那个用户修改了商户的一些设置，或者修改了手续费率等。</p><span id="more"></span><p>那么我们很自然的想到，可以使用 AOP 对可能产生修改的地方进行拦截，获取前后参数然后再入库。但是这样需要知道有哪些地方会做出哪些修改，还需要在方法上加注解。</p><p>这里使用 Mybatis Plugin 来做操作记录。</p><h2 id="Mybatis-plugin-介绍"><a href="#Mybatis-plugin-介绍" class="headerlink" title="Mybatis plugin 介绍"></a>Mybatis plugin 介绍</h2><p>这里简要介绍一下Mybatis plugin。<br>Mybatis plugin 也就是 mybatis interception, 其实就是一个拦截器，可以拦截 Mybatis 运行各个阶段的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(method = &quot;update&quot;, type = Executor.class, args = &#123;MappedStatement.class, Object.class&#125;),</span><br><span class="hljs-meta">        @Signature(method = &quot;update&quot;, type = StatementHandler.class, args = &#123;Statement.class&#125;),</span><br><span class="hljs-meta">        @Signature(type=StatementHandler.class,method=&quot;prepare&quot;,args=&#123;Connection.class&#125;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(type = StatementHandler.class, method = &quot;update&quot;, args = &#123;Statement.class&#125;)</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure><p>这里不做详细介绍，参考文章如下<br><a href="https://www.cnblogs.com/fangjian0423/p/mybatis-interceptor.html">Mybatis interceptor 参考文章</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面先贴一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(type = StatementHandler.class, method = &quot;update&quot;, args = &#123;Statement.class&#125;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationLogPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监控列表</span><br><span class="hljs-comment">     * 监控以下表的修改语句，写入redis中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; MONITOR_TABLE = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        String[] table = &#123;<br>                <span class="hljs-string">&quot;agency_merchant&quot;</span>,<br>                <span class="hljs-string">&quot;pay_merchantChannel&quot;</span>,<br>                <span class="hljs-string">&quot;agency_merchantSettle&quot;</span>,<br>                <span class="hljs-string">&quot;agency_vendor&quot;</span>,<br>                <span class="hljs-string">&quot;agency_merchantWechat&quot;</span>,<br>                <span class="hljs-string">&quot;agency_outlet&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">for</span> (String s : table) &#123;<br>            MONITOR_TABLE.add(s.toLowerCase());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        BoundSql boundSql = <span class="hljs-keyword">null</span>;<br>        StatementHandler statementHandler;<br>        <span class="hljs-keyword">if</span> (invocation.getTarget() <span class="hljs-keyword">instanceof</span> StatementHandler) &#123;<br>            statementHandler = (StatementHandler) invocation.getTarget();<br>            boundSql = statementHandler.getBoundSql();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125;<br><br>        Object[] args = invocation.getArgs();<br>        Statement statement = (Statement) args[<span class="hljs-number">0</span>];<br><br>        String preSql = boundSql.getSql();<br>        MySqlStatementParser mySqlStatementParser = <span class="hljs-keyword">new</span> MySqlStatementParser(preSql);<br>        SQLStatement sqlStatement = mySqlStatementParser.parseStatement();<br>        SQLExprTableSource sqlTableSource = <span class="hljs-keyword">null</span>;<br>        SQLExpr where = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 获取 SQL 的 表名 以及 where 条件。仅处理Update语句，其他情况直接执行原SQL</span><br>        <span class="hljs-keyword">if</span> (sqlStatement <span class="hljs-keyword">instanceof</span> SQLSelectStatement) &#123;<br>            <span class="hljs-comment">// 查询语句不做任何处理，直接结束</span><br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sqlStatement <span class="hljs-keyword">instanceof</span> SQLInsertStatement) &#123;<br><span class="hljs-comment">//            SQLInsertStatement sqlInsertStatement = (SQLInsertStatement) sqlStatement;</span><br><span class="hljs-comment">//            sqlTableSource = sqlInsertStatement.getTableSource();</span><br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sqlStatement <span class="hljs-keyword">instanceof</span> SQLUpdateStatement) &#123;<br>            SQLUpdateStatement sqlUpdateStatement = (SQLUpdateStatement) sqlStatement;<br>            sqlTableSource = (SQLExprTableSource) sqlUpdateStatement.getTableSource();<br>            where = sqlUpdateStatement.getWhere();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sqlStatement <span class="hljs-keyword">instanceof</span> SQLDeleteStatement) &#123;<br><span class="hljs-comment">//            SQLDeleteStatement sqlDeleteStatement = (SQLDeleteStatement) sqlStatement;</span><br><span class="hljs-comment">//            sqlTableSource = (SQLExprTableSource) sqlDeleteStatement.getTableSource();</span><br><span class="hljs-comment">//            where = sqlDeleteStatement.getWhere();</span><br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125;<br>        String tableName = sqlTableSource.toString();<br>        <span class="hljs-comment">// where 条件为空，说明是一个批量修改，直接执行，不记录。这种情况记录SQL最好</span><br>        <span class="hljs-keyword">if</span> (where == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125;<br>        <span class="hljs-comment">// 获取 Connection</span><br>        Connection connection = statement.getConnection();<br>        <span class="hljs-comment">// Update影响的主键</span><br>        Long id = <span class="hljs-number">0L</span>;<br>        List&lt;Map&lt;String, Object&gt;&gt; beforeImage;<br>        List&lt;Map&lt;String, Object&gt;&gt; afterImage;<br>        <span class="hljs-keyword">if</span> (MONITOR_TABLE.contains(tableName.toLowerCase())) &#123;<br>            <span class="hljs-comment">// 查询前镜像</span><br>            String beforeImagePreSql = String.format(<span class="hljs-string">&quot;SELECT * FROM %s where %s&quot;</span>, tableName, where.toString());<br>            RoutingStatementHandler routingStatementHandler = (RoutingStatementHandler) getJdkDynamicProxyTargetObject(statementHandler);<br>            StatementHandler delegate = (StatementHandler) ReflectUtil.getFieldValue(routingStatementHandler, <span class="hljs-string">&quot;delegate&quot;</span>);<br>            <span class="hljs-comment">//获取mapper方法与xml的映射信息</span><br>            MappedStatement mappedStatement = (MappedStatement) ReflectUtil.getFieldValue(delegate, <span class="hljs-string">&quot;mappedStatement&quot;</span>);<br>            List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>            Object parameterObject = boundSql.getParameterObject();<br>            List&lt;SQLObject&gt; children = where.getChildren();<br>            <span class="hljs-keyword">int</span> whereConditionCount = getWhereConditionCount(children, <span class="hljs-number">0</span>);<br>            List&lt;ParameterMapping&gt; newParameterMapping = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(parameterMappings.size());<br>            <span class="hljs-comment">// Where语句一般都在最后，所以根据 whereConditionCount 取最后几个参数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = parameterMappings.size() - whereConditionCount; i &lt; parameterMappings.size(); i++) &#123;<br>                newParameterMapping.add(parameterMappings.get(i));<br>            &#125;<br>            BoundSql beforeImageBoundSql = <span class="hljs-keyword">new</span> BoundSql(mappedStatement.getConfiguration(), beforeImagePreSql, newParameterMapping, parameterObject);<br>            <span class="hljs-comment">//StatementHandler、ResultSetHandler、ParameterHandler运行在这几个中插入自己的代码</span><br>            ParameterHandler parameterHandler = <span class="hljs-keyword">new</span> DefaultParameterHandler(mappedStatement, parameterObject, beforeImageBoundSql);<br>            <span class="hljs-comment">//创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库。</span><br>            PreparedStatement prepareStatement = connection.prepareStatement(beforeImagePreSql);<br>            parameterHandler.setParameters(prepareStatement);<br>            ResultSet rs = prepareStatement.executeQuery();<br>            beforeImage = convertList(rs);<br>            id = (Long) beforeImage.get(<span class="hljs-number">0</span>).get(<span class="hljs-string">&quot;id&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不需要监控的表直接结束</span><br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125;<br>        Object proceed = invocation.proceed();<br>        <span class="hljs-keyword">if</span> (beforeImage.size() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 只在更新数据为一条记录时记录日志。已经可以满足绝大部分业务需求了。</span><br>            <span class="hljs-comment">// 查询新数据，此时使用主键查询</span><br>            String afterImageSql = String.format(<span class="hljs-string">&quot;SELECT * from %s where id = %s&quot;</span>, tableName, id);<br>            PreparedStatement prepareStatement = connection.prepareStatement(afterImageSql);<br>            ResultSet rs = prepareStatement.executeQuery();<br>            afterImage = convertList(rs);<br>            <span class="hljs-comment">// 新旧数据对比</span><br>            List&lt;Map&lt;String, Object&gt;&gt; difference = difference(beforeImage.get(<span class="hljs-number">0</span>), afterImage.get(<span class="hljs-number">0</span>));<br><span class="hljs-comment">//            System.out.println(difference);</span><br>            <span class="hljs-comment">// 获取用户信息</span><br>            AuthenticationDto authentication = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                AuthUtil bean = SpringUtil.getBean(AuthUtil.class);<br>                authentication = bean.getAuthentication();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                log.warn(<span class="hljs-string">&quot;获取用户信息失败&quot;</span>);<br>            &#125;<br><br>            String userId = authentication == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;&quot;</span> : String.valueOf(authentication.getUserId());<br>            String merchantId = authentication == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;&quot;</span> : String.valueOf(authentication.getMerchantId());<br><br>            <span class="hljs-comment">// 插入 opreation_log</span><br>            String operationLogSQL = <span class="hljs-string">&quot;INSERT INTO `pay_1`.`operation_log`(`uid`, `merchantId`, `tableName`, `operationCode`, `primaryKey`, `oriValue`, `newValue`, `recordTime`)&quot;</span> +<br>                    <span class="hljs-string">&quot;VALUES(?, ?, ?, ?, ?, ?, ?, ?);&quot;</span>;<br>            PreparedStatement operationLogStatement = connection.prepareStatement(operationLogSQL); <span class="hljs-comment">//创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库。</span><br>            <span class="hljs-comment">// uid</span><br>            operationLogStatement.setString(<span class="hljs-number">1</span>, userId);<br>            <span class="hljs-comment">// merchantId</span><br>            operationLogStatement.setString(<span class="hljs-number">2</span>, merchantId);<br>            <span class="hljs-comment">//tableName</span><br>            operationLogStatement.setString(<span class="hljs-number">3</span>, tableName);<br>            <span class="hljs-comment">//operationCode</span><br>            operationLogStatement.setString(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;UPDATE&quot;</span>);<br>            <span class="hljs-comment">//primaryKey</span><br>            operationLogStatement.setString(<span class="hljs-number">5</span>, String.valueOf(id));<br>            <span class="hljs-comment">//oriValue</span><br>            operationLogStatement.setString(<span class="hljs-number">6</span>, JsonUtil.entity2Json(difference.get(<span class="hljs-number">0</span>)));<br>            <span class="hljs-comment">//newValue</span><br>            operationLogStatement.setString(<span class="hljs-number">7</span>, JsonUtil.entity2Json(difference.get(<span class="hljs-number">1</span>)));<br>            <span class="hljs-comment">//recordTime</span><br>            operationLogStatement.setInt(<span class="hljs-number">8</span>, TimeUtil.getNow());<br>            operationLogStatement.execute();<br>        &#125;<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (target <span class="hljs-keyword">instanceof</span> StatementHandler) &#123;<br>            <span class="hljs-keyword">return</span> Plugin.wrap(target, <span class="hljs-keyword">this</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> target;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        Interceptor.<span class="hljs-keyword">super</span>.setProperties(properties);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取JDK动态代理的被代理对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getJdkDynamicProxyTargetObject</span><span class="hljs-params">(Object proxy)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field field = proxy.getClass().getSuperclass().getDeclaredField(<span class="hljs-string">&quot;h&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//获取指定对象中此字段的值</span><br>        Plugin pluginProxy = (Plugin) field.get(proxy); <span class="hljs-comment">//获取Proxy对象中的此字段的值</span><br>        Field target = pluginProxy.getClass().getDeclaredField(<span class="hljs-string">&quot;target&quot;</span>);<br>        target.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">return</span> target.get(pluginProxy);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析where条件抽象语法树，获取where条件数量</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> listCommon</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWhereConditionCount</span><span class="hljs-params">(List&lt;SQLObject&gt; listCommon, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (SQLObject sqlObject : listCommon) &#123;<br>            <span class="hljs-keyword">if</span> (sqlObject <span class="hljs-keyword">instanceof</span> SQLBinaryOpExpr) &#123;<br>                SQLBinaryOpExpr sqlObject1 = (SQLBinaryOpExpr) sqlObject;<br>                List&lt;SQLObject&gt; chList = sqlObject1.getChildren();<br>                sum = getWhereConditionCount(chList, sum);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sqlObject <span class="hljs-keyword">instanceof</span> SQLIdentifierExpr) &#123;<br>                sum += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * MYSQL结果集转对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; convertList(ResultSet rs) &#123;<br>        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ResultSetMetaData md = rs.getMetaData();<br>            <span class="hljs-keyword">int</span> columnCount = md.getColumnCount();<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                Map&lt;String, Object&gt; rowData = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>                    Object object = rs.getObject(i);<br>                    <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> BigInteger) &#123;<br>                        rowData.put(md.getColumnName(i), ((BigInteger) object).longValue());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        rowData.put(md.getColumnName(i), object);<br>                    &#125;<br>                &#125;<br>                list.add(rowData);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>                    rs.close();<br>                &#125;<br>                rs = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 结果集对比</span><br><span class="hljs-comment">     * 返回一个List map</span><br><span class="hljs-comment">     * List.get(0) 存储前镜像</span><br><span class="hljs-comment">     * List.get(1) 存储后镜像</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beforeImage</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> afterImage</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; difference(Map&lt;String, Object&gt; beforeImage, Map&lt;String, Object&gt; afterImage) &#123;<br>        List&lt;Map&lt;String, Object&gt;&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        result.add(<span class="hljs-keyword">new</span> HashMap&lt;&gt;());<br>        result.add(<span class="hljs-keyword">new</span> HashMap&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; beforeEntry : beforeImage.entrySet()) &#123;<br>            String key = beforeEntry.getKey();<br>            Object beforeValue = beforeEntry.getValue();<br>            Object afterValue = afterImage.get(key);<br>            <span class="hljs-keyword">if</span> (!Objects.equals(beforeValue, afterValue)) &#123;<br>                result.get(<span class="hljs-number">0</span>).put(key, beforeValue);<br>                result.get(<span class="hljs-number">1</span>).put(key, afterValue);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>首先，这个需求我做了一定的简化，事实上可以做的更加完善。<br>比如，我只处理 update 语句，只处理单条更新的语句。<br>也只是简单的测试通过，还没有经过生产的验证，如果以后生产验证有问题再修改一下Bug。</p><p>说一下整体思路。<br>首先我们的项目是强依赖 Mybatis 的，所以所有的数据库操作都是经过 Mybatis 的。那我们可以拦截所有的SQL语句，如果发现有更新我们特定表的SQL语句就做一些处理。<br>处理如下：</p><ol><li>根据 update 语句获取它的 where 条件，然后生成反向的查询 SQL 语句。在执行更新语句前查出前置的SQL镜像，这里称为 beforeImage.</li><li>执行 update 语句。</li><li>我们所有的表都是有主键的，且一定叫id。把 beforeImage 的 id 取出来，根据Id 获取后置镜像，这里称为 afterImage.</li><li>根据前后镜像比较，取出有变更的字段。再加上从 ThreadLocal 中获取到的用户身份信息，生成一条SQL记录。</li></ol><p>下面是代码详解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(type = StatementHandler.class, method = &quot;update&quot;, args = &#123;Statement.class&#125;)</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure><p>上面这一个注解，代表我拦截的是 StatementHandler 阶段。拦截这个阶段的目的是可以拿到 Statement, 然后就可以拿到 Connection。</p><p><code>MySqlStatementParser</code> 这个类是alibaba druid的包，这里我肯定不可能去自己写SQL语句的解析的，当然是选择白嫖。<br>生成 MySqlStatementParser 后可以取到其中的 where 条件，然后获取 where 条件参数个数。<br>同时还可以获取到表名。</p><p>当我们判断这张表在我们需要监控的表中时。查询前置镜像。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (MONITOR_TABLE.contains(tableName.toLowerCase())) &#123;<br>    <span class="hljs-comment">// 查询前镜像</span><br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>前置镜像的查询方法</p><p>核心方法如下。就是使用 Mybatis 的方法去创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">BoundSql beforeImageBoundSql = <span class="hljs-keyword">new</span> BoundSql(mappedStatement.getConfiguration(), beforeImagePreSql, newParameterMapping, parameterObject);<br><span class="hljs-comment">//StatementHandler、ResultSetHandler、ParameterHandler运行在这几个中插入自己的代码</span><br>ParameterHandler parameterHandler = <span class="hljs-keyword">new</span> DefaultParameterHandler(mappedStatement, parameterObject, beforeImageBoundSql);<br><span class="hljs-comment">//创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库。</span><br>PreparedStatement prepareStatement = connection.prepareStatement(beforeImagePreSql);<br>parameterHandler.setParameters(prepareStatement);<br>ResultSet rs = prepareStatement.executeQuery();<br></code></pre></td></tr></table></figure><p>关键点就是 要生成一个新的 BoundSql 和 ParameterHandler。<br>这里的关键点又是参数列表。</p><p>我们的参数一定是包含在 update 语句的参数中的，从 Mybatis 设置参数的源码可知，它是遍历 parameterMapping 从 parameterObject 取值的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setParameters</span><span class="hljs-params">(PreparedStatement ps)</span> </span>&#123;<br>   ErrorContext.instance().activity(<span class="hljs-string">&quot;setting parameters&quot;</span>).object(mappedStatement.getParameterMap().getId());<br>   List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>   <span class="hljs-keyword">if</span> (parameterMappings != <span class="hljs-keyword">null</span>) &#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameterMappings.size(); i++) &#123;<br>       ParameterMapping parameterMapping = parameterMappings.get(i);<br>       <span class="hljs-keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;<br>         Object value;<br>         String propertyName = parameterMapping.getProperty();<br>         <span class="hljs-keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123; <span class="hljs-comment">// issue #448 ask first for additional params</span><br>           value = boundSql.getAdditionalParameter(propertyName);<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parameterObject == <span class="hljs-keyword">null</span>) &#123;<br>           value = <span class="hljs-keyword">null</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;<br>           value = parameterObject;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>           MetaObject metaObject = configuration.newMetaObject(parameterObject);<br>           value = metaObject.getValue(propertyName);<br>         &#125;<br>         TypeHandler typeHandler = parameterMapping.getTypeHandler();<br>         JdbcType jdbcType = parameterMapping.getJdbcType();<br>         <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span> &amp;&amp; jdbcType == <span class="hljs-keyword">null</span>) &#123;<br>           jdbcType = configuration.getJdbcTypeForNull();<br>         &#125;<br>         <span class="hljs-keyword">try</span> &#123;<br>           typeHandler.setParameter(ps, i + <span class="hljs-number">1</span>, value, jdbcType);<br>         &#125; <span class="hljs-keyword">catch</span> (TypeException | SQLException e) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TypeException(<span class="hljs-string">&quot;Could not set parameters for mapping: &quot;</span> + parameterMapping + <span class="hljs-string">&quot;. Cause: &quot;</span> + e, e);<br>         &#125;<br>       &#125;<br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>所以这里我们生成一个新的 <code>List&lt;ParameterMapping&gt;</code> 然后从旧的 <code>parameterMappings</code> 中取最后一个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;ParameterMapping&gt; newParameterMapping = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(parameterMappings.size());<br><span class="hljs-comment">// Where语句一般都在最后，所以根据 whereConditionCount 取最后几个参数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = parameterMappings.size() - whereConditionCount; i &lt; parameterMappings.size(); i++) &#123;<br>    newParameterMapping.add(parameterMappings.get(i));<br>&#125;<br></code></pre></td></tr></table></figure><p>拿到结果集后 放入 <code>List&lt;Map&lt;String, Object&gt;&gt; beforeImage;</code></p><p>后置镜像同理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String afterImageSql = String.format(<span class="hljs-string">&quot;SELECT * from %s where id = %s&quot;</span>, tableName, id);<br>PreparedStatement prepareStatement = connection.prepareStatement(afterImageSql);<br>ResultSet rs = prepareStatement.executeQuery();<br>afterImage = convertList(rs);<br></code></pre></td></tr></table></figure><p>调用 <code>difference</code> 方法拿到结果集的差异。</p><p>这一段是获取用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 获取用户信息</span><br>AuthenticationDto authentication = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    AuthUtil bean = SpringUtil.getBean(AuthUtil.class);<br>    authentication = bean.getAuthentication();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    log.warn(<span class="hljs-string">&quot;获取用户信息失败&quot;</span>);<br>&#125;<br><br>String userId = authentication == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;&quot;</span> : String.valueOf(authentication.getUserId());<br>String merchantId = authentication == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;&quot;</span> : String.valueOf(authentication.getMerchantId());<br></code></pre></td></tr></table></figure><p>这一段是插入日志表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 插入 opreation_log</span><br>String operationLogSQL = <span class="hljs-string">&quot;INSERT INTO `pay_1`.`operation_log`(`uid`, `merchantId`, `tableName`, `operationCode`, `primaryKey`, `oriValue`, `newValue`, `recordTime`)&quot;</span> +<br>        <span class="hljs-string">&quot;VALUES(?, ?, ?, ?, ?, ?, ?, ?);&quot;</span>;<br>PreparedStatement operationLogStatement = connection.prepareStatement(operationLogSQL); <span class="hljs-comment">//创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库。</span><br><span class="hljs-comment">// uid</span><br>operationLogStatement.setString(<span class="hljs-number">1</span>, userId);<br><span class="hljs-comment">// merchantId</span><br>operationLogStatement.setString(<span class="hljs-number">2</span>, merchantId);<br><span class="hljs-comment">//tableName</span><br>operationLogStatement.setString(<span class="hljs-number">3</span>, tableName);<br><span class="hljs-comment">//operationCode</span><br>operationLogStatement.setString(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;UPDATE&quot;</span>);<br><span class="hljs-comment">//primaryKey</span><br>operationLogStatement.setString(<span class="hljs-number">5</span>, String.valueOf(id));<br><span class="hljs-comment">//oriValue</span><br>operationLogStatement.setString(<span class="hljs-number">6</span>, JsonUtil.entity2Json(difference.get(<span class="hljs-number">0</span>)));<br><span class="hljs-comment">//newValue</span><br>operationLogStatement.setString(<span class="hljs-number">7</span>, JsonUtil.entity2Json(difference.get(<span class="hljs-number">1</span>)));<br><span class="hljs-comment">//recordTime</span><br>operationLogStatement.setInt(<span class="hljs-number">8</span>, TimeUtil.getNow());<br>operationLogStatement.execute();<br></code></pre></td></tr></table></figure><p>流程大概就这么多。</p><p>这里其实有一个思考点，关于回滚。<br>所以这里有一个比较讲究的地方，我们这里的 Connection 其实和update语句是同一个 Connection，所以回滚的时候会一起回滚。</p><p>这一篇写的比较匆忙，主要以代码为主</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jenkins_CICD部署.md</title>
    <link href="/2021/08/06/jenkins-cicd%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/08/06/jenkins-cicd%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一套基于-jenkins-的部署方法"><a href="#一套基于-jenkins-的部署方法" class="headerlink" title="一套基于 jenkins 的部署方法"></a>一套基于 jenkins 的部署方法</h1><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以我个人使用经验来说，Jenkins 使用的很痛苦，一边写一边骂。目前只是做了一套简单的方案，还有更多复杂的东西并没有做。<br>目前做到的是，本地搭建 Jenkins 环境，使用 BlueOcean，Jenkins pipeline，shared library 多环境部署<br>主要精力在标准 SpringBoot 项目的部署。</p><p>Jenkins 部署就不说了，我是直接在物理机部署的 Jenkins</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>标准的 Springboot 项目，最外层应该有以下几个文件<br>pom.xml 文件，该文件是 maven 的配置文件<br>Dockerfile 文件，Docker 容器文件<br>jenkinsfile 文件，jenkins pipeline 文件。</p><p>然后开发一个公共库，这里命名为 jenkins-pipeline-lib，并在 Jenkins 全局配置 Global Pipeline Libraries</p><h3 id="jenkinsfile"><a href="#jenkinsfile" class="headerlink" title="jenkinsfile"></a>jenkinsfile</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">library <span class="hljs-string">&#x27;relengxing-library&#x27;</span> <span class="hljs-comment">// 在Global Pipeline Libraries中配置的library name</span><br><span class="hljs-keyword">def</span> map = [:]<br><span class="hljs-comment">// 此处可以添加参数，会传入方法</span><br>build_v2(map)<br></code></pre></td></tr></table></figure><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><p>底层容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>-jdk-alpine<br><span class="hljs-keyword">RUN</span><span class="bash"> apk add --update ttf-dejavu fontconfig</span><br><span class="hljs-keyword">VOLUME</span><span class="bash"> /tmp</span><br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir -p /application/agent</span><br><span class="hljs-comment"># 挂载时区</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone</span><br><span class="hljs-comment">#定义jvm参数变量</span><br><span class="hljs-keyword">ENV</span> JAVA_OPTS=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 复制SkyWalking</span><br><span class="hljs-keyword">ADD</span><span class="bash"> agent/ /application/agent/</span><br><span class="hljs-comment">#启动命令</span><br><span class="hljs-comment">#ENTRYPOINT cd /application &amp;&amp; java $&#123;JAVA_OPTS&#125; -Djava.security.egd=file:/dev/./urandom -jar app.jar</span><br></code></pre></td></tr></table></figure><p>自定义容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#FROM 192.168.1.138:5000/supay-java8-base:latest</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.138</span>:<span class="hljs-number">5000</span>/xxxx-java8-skywalking-base:latest<br><br><span class="hljs-keyword">ARG</span> JAR_FILE<br><span class="hljs-keyword">COPY</span><span class="bash"> <span class="hljs-variable">$&#123;JAR_FILE&#125;</span> /application/app.jar</span><br><br><span class="hljs-comment">#启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> <span class="hljs-built_in">cd</span> /application &amp;&amp; java <span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span> -Djava.security.egd=file:/dev/./urandom -jar app.jar</span><br><span class="hljs-comment"># 此处填写该项目需要暴露的端口号</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">20002</span><br><br></code></pre></td></tr></table></figure><h3 id="shared-pipeline"><a href="#shared-pipeline" class="headerlink" title="shared pipeline"></a>shared pipeline</h3><p>build_v2.groovy 文件<br>groovy 仅作为胶水语言，实际的编译执行等，通过 sh 和 python 来完成<br><img src="/2021/08/06/jenkins-cicd%E9%83%A8%E7%BD%B2/jenkins-project.png" alt="项目结构"><br>一些参考文章：<br><a href="https://www.jianshu.com/p/2cdc8efedf2f">Jenkins pipeline 中优雅的执行 shell/python/groovy 脚本</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">def</span> call(configMap) &#123;<br><br>    pipeline &#123;<br>        agent any<br>        options &#123;<br>            <span class="hljs-comment">// 禁止同时运行多个流水线</span><br>            disableConcurrentBuilds()<br>        &#125;<br>        <span class="hljs-comment">//常量参数，初始确定后一般不需更改</span><br><span class="hljs-comment">//        environment &#123;</span><br><span class="hljs-comment">//            projectName = &quot;$&#123;configMap.projectName&#125;&quot;</span><br><span class="hljs-comment">//            java_opts = &quot;$&#123;configMap.java_opts&#125;&quot;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        stages &#123;<br>            stage(<span class="hljs-string">&quot;Pre work&quot;</span>) &#123;<br>                input &#123;<br>                    message <span class="hljs-string">&quot;请输入版本号?&quot;</span><br>                    ok <span class="hljs-string">&quot;确定&quot;</span><br><span class="hljs-comment">//                    submitter &quot;alice,bob&quot;</span><br>                    parameters &#123;<br>                        string(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;OLD_VERSION&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-string">&#x27;latest&#x27;</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;旧版本号?&#x27;</span>)<br>                        string(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;NEW_VERSION&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-string">&#x27;latest&#x27;</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;新版本号?&#x27;</span>)<br>                    &#125;<br>                &#125;<br><br>                steps &#123;<br>                    echo <span class="hljs-string">&quot;Pre work echo&quot;</span><br>                    dir(<span class="hljs-string">&quot;cicddir&quot;</span>) &#123;<br>                        git <span class="hljs-attr">credentialsId:</span> <span class="hljs-string">&#x27;bfxxxxx0-xxxx-4259-xxxx-22946xxxxxce&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;https://gitee.com/XXXXXXXX/jenkins-pipeline-lib.git&#x27;</span><br>                        sh(<span class="hljs-string">&quot;chmod -R +x ./cicd/*&quot;</span>)<br><span class="hljs-comment">//                        sh(&quot;cicd/pre.sh&quot;)</span><br>                        sh(<span class="hljs-string">&quot;python3 cicd/read_project_info.py $&#123;env.BRANCH_NAME&#125; $&#123;OLD_VERSION&#125; $&#123;NEW_VERSION&#125;&quot;</span>)<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            stage(<span class="hljs-string">&#x27;Docker Build&#x27;</span>) &#123;<br>                steps &#123;<br>                    script &#123;<br>                        dir(<span class="hljs-string">&quot;cicddir&quot;</span>) &#123;<br>                            sh(<span class="hljs-string">&quot;python3 cicd/build.py&quot;</span>)<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            stage(<span class="hljs-string">&quot;Deploy&quot;</span>) &#123;<br>                steps &#123;<br>                    script &#123;<br>                        dir(<span class="hljs-string">&quot;cicddir&quot;</span>) &#123;<br>                            sh(<span class="hljs-string">&quot;python3 cicd/deploy.py&quot;</span>)<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        post &#123;<br>            always &#123;<br>                echo <span class="hljs-string">&#x27;I will always say Hello!&#x27;</span><br>            &#125;<br>            aborted &#123;<br>                echo <span class="hljs-string">&#x27;I was aborted&#x27;</span><br>            &#125;<br>            failure &#123;<br>                echo <span class="hljs-string">&#x27;I was failure&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="自定义脚本"><a href="#自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本</h3><p>read_project_info.py 会从 pom 文件中读取项目名称等信息，从 dockerfile 读端口号, 从全局配置中读取配置信息，生成一个本地文件，供后面的脚本使用<br>build.py 执行编译命令，并推送镜像到服务器<br>deploy.py 执行部署命令，可部署到普通 docker 服务器和 K8s 服务器</p><p>read_project_inf.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">该脚本用于读取JAVA项目信息</span><br><span class="hljs-string">会从 Pom.xml Dockerfile yaml 中读取项目部署所需要的信息，生成一个json文件存到本地，供其他脚本使用</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> xml<br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> yaml<br><br>branch = sys.argv[<span class="hljs-number">1</span>]<br>old_version = sys.argv[<span class="hljs-number">2</span>]<br>new_version = sys.argv[<span class="hljs-number">3</span>]<br><br>GLOBAL_PROJECT_INFO = <span class="hljs-string">&#x27;global_project_info.json&#x27;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getMappingsNode</span>(<span class="hljs-params">node, nodeName</span>):</span><br>    <span class="hljs-keyword">if</span> node.findall(<span class="hljs-string">&#x27;*&#x27;</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> node.findall(<span class="hljs-string">&#x27;*&#x27;</span>):<br>            <span class="hljs-keyword">if</span> nodeName <span class="hljs-keyword">in</span> n.tag:<br>                <span class="hljs-keyword">return</span> n<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> getMappingsNode(n, nodeName)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_project_info</span>(<span class="hljs-params">filepath</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    解析java Pom.xml 文件，获取项目名称,版本号,service模块所在路径</span><br><span class="hljs-string">    :param filepath: Pom文件地址</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    pomFile = xml.parse(filepath)<br>    root = pomFile.getroot()<br>    artifactId = getMappingsNode(root, <span class="hljs-string">&#x27;artifactId&#x27;</span>).text<br>    version = getMappingsNode(root, <span class="hljs-string">&#x27;version&#x27;</span>)<br>    version = <span class="hljs-built_in">str</span>(version.text).replace(<span class="hljs-string">&#x27;-SNAPSHOT&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    moduleList = getMappingsNode(root, <span class="hljs-string">&#x27;modules&#x27;</span>)<br>    serviceModule = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> moduleList != <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">for</span> module <span class="hljs-keyword">in</span> moduleList:<br>            module = module.text<br>            <span class="hljs-keyword">if</span> module.endswith(<span class="hljs-string">&quot;app&quot;</span>) <span class="hljs-keyword">or</span> module.endswith(<span class="hljs-string">&quot;service&quot;</span>):<br>                serviceModule = module<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;project_name&quot;</span>: artifactId,<br>        <span class="hljs-string">&quot;version&quot;</span>: version,<br>        <span class="hljs-string">&quot;service_module&quot;</span>: serviceModule<br>    &#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_yaml_file</span>(<span class="hljs-params">branch, project_name</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据所选分支和项目名称获取全局配置信息</span><br><span class="hljs-string">    :param branch:</span><br><span class="hljs-string">    :param project_name:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    profile = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> branch == <span class="hljs-string">&#x27;develop&#x27;</span>:<br>        profile = <span class="hljs-string">&#x27;dev&#x27;</span><br>    <span class="hljs-keyword">elif</span> branch == <span class="hljs-string">&#x27;test&#x27;</span>:<br>        profile = <span class="hljs-string">&#x27;test&#x27;</span><br>    <span class="hljs-keyword">elif</span> branch == <span class="hljs-string">&#x27;master&#x27;</span>:<br>        profile = <span class="hljs-string">&#x27;master&#x27;</span><br>    filename = <span class="hljs-string">&#x27;resources/deploy_&#x27;</span> + profile + <span class="hljs-string">&#x27;.yaml&#x27;</span><br>    fs = <span class="hljs-built_in">open</span>(os.path.join(filename), encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>    datas = yaml.load(fs)<br>    project_info_list = datas[<span class="hljs-string">&#x27;project&#x27;</span>]<br>    <span class="hljs-keyword">for</span> project_info <span class="hljs-keyword">in</span> project_info_list:<br>        <span class="hljs-keyword">if</span> project_info[<span class="hljs-string">&#x27;project_name&#x27;</span>] == project_name:<br>            project_info[<span class="hljs-string">&#x27;profile&#x27;</span>] = profile<br>            <span class="hljs-keyword">return</span> project_info<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_docker_file</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    从 dockerfile 中读取，看是否使用了skywalking镜像，使用expose的端口来映射，仅读取第一个export</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    expose = <span class="hljs-string">&#x27;&#x27;</span><br>    skywalking_image = <span class="hljs-literal">False</span><br>    filename = <span class="hljs-string">&#x27;../Dockerfile&#x27;</span><br>    fs = <span class="hljs-built_in">open</span>(os.path.join(filename), encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fs:<br>        <span class="hljs-keyword">if</span> line.lower().startswith(<span class="hljs-string">&quot;from&quot;</span>) <span class="hljs-keyword">and</span> line.lower().find(<span class="hljs-string">&quot;skywalking&quot;</span>) &gt;= <span class="hljs-number">0</span>:<br>            skywalking_image = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> line.lower().startswith(<span class="hljs-string">&quot;expose&quot;</span>):<br>            expose = expose + line.replace(<span class="hljs-string">&quot;EXPOSE&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;expose&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip()<br>            <span class="hljs-keyword">break</span><br>    fs.close()<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;expose&quot;</span>: expose,<br>        <span class="hljs-string">&quot;skywalking_image&quot;</span>: skywalking_image<br>    &#125;<br><br><br>project_info = get_project_info(<span class="hljs-string">&#x27;../pom.xml&#x27;</span>)<br>project_info.update(get_yaml_file(branch, project_info[<span class="hljs-string">&#x27;project_name&#x27;</span>]))<br>project_info.update(get_docker_file())<br><br>project_info[<span class="hljs-string">&#x27;branch&#x27;</span>] = branch<br>project_info[<span class="hljs-string">&#x27;old_version&#x27;</span>] = old_version<br>project_info[<span class="hljs-string">&#x27;new_version&#x27;</span>] = new_version<br><br>project_info[<span class="hljs-string">&#x27;image&#x27;</span>] = project_info[<span class="hljs-string">&quot;project_name&quot;</span>] + <span class="hljs-string">&quot;:&quot;</span> + project_info[<span class="hljs-string">&#x27;new_version&#x27;</span>]<br>project_info[<span class="hljs-string">&#x27;remote_image&#x27;</span>] = project_info[<span class="hljs-string">&#x27;registry&#x27;</span>] + <span class="hljs-string">&quot;/&quot;</span> + project_info[<span class="hljs-string">&#x27;image&#x27;</span>]<br><br><span class="hljs-keyword">if</span> project_info[<span class="hljs-string">&#x27;service_module&#x27;</span>] == <span class="hljs-literal">None</span>:<br>    project_info[<span class="hljs-string">&quot;jar_path&quot;</span>] = <span class="hljs-string">&quot;./target/&quot;</span><br><span class="hljs-keyword">else</span>:<br>    project_info[<span class="hljs-string">&quot;jar_path&quot;</span>] = <span class="hljs-string">&quot;./&quot;</span> + project_info[<span class="hljs-string">&#x27;service_module&#x27;</span>] + <span class="hljs-string">&quot;/target/&quot;</span><br><br>print(project_info)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(GLOBAL_PROJECT_INFO, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(json.dumps(project_info, ensure_ascii=<span class="hljs-literal">False</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>build.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-comment"># 部署脚本</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">export PAHT=$PATH:/bin:/usr/bin</span><br><span class="hljs-string">/bin/mvn clean package  -Dmaven.test.skip=true -U</span><br><span class="hljs-string">docker build -t $&#123;projectName&#125; --build-arg JAR_FILE=$&#123;jarPath&#125; .</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>GLOBAL_PROJECT_INFO = <span class="hljs-string">&#x27;global_project_info.json&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(GLOBAL_PROJECT_INFO, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    global_project_info = json.load(f)<br><br><span class="hljs-comment"># print(global_project_info)</span><br><br><span class="hljs-comment"># os.system(&quot;cd ../&quot;)</span><br><span class="hljs-comment"># os.system(&quot;export PAHT=$PATH:/bin:/usr/bin&quot;)</span><br><span class="hljs-comment"># os.system(&quot;cd .. | /bin/mvn clean package  -Dmaven.test.skip=true -U&quot;)</span><br><br>build_result = os.system(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">cd ../</span><br><span class="hljs-string">export PAHT=$PATH:/bin:/usr/bin</span><br><span class="hljs-string">/bin/mvn clean package  -Dmaven.test.skip=true -U</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br><span class="hljs-keyword">if</span> build_result != <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Jar包编译失败&quot;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversalDir_FirstDir</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-built_in">list</span> = []<br>    <span class="hljs-keyword">if</span> (os.path.exists(path)):<br>        files = os.listdir(path)<br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>            m = os.path.join(path, file)<br>            <span class="hljs-keyword">if</span> (os.path.isfile(m)):<br>                h = os.path.split(m)<br>                <span class="hljs-keyword">if</span> h[<span class="hljs-number">1</span>].endswith(<span class="hljs-string">&quot;.jar&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> h[<span class="hljs-number">1</span>].endswith(<span class="hljs-string">&quot;sources.jar&quot;</span>):<br>                    <span class="hljs-built_in">list</span>.append(h[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span><br><br><br>jar_list = traversalDir_FirstDir(<span class="hljs-string">&quot;../&quot;</span> + global_project_info[<span class="hljs-string">&quot;jar_path&quot;</span>])<br>print(jar_list)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(jar_list) == <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;编译错误，没有合适的jar包&quot;</span>)<br><br>docker_build_shell = <span class="hljs-string">&quot;docker build -t %s --build-arg JAR_FILE=&#x27;%s&#x27; .&quot;</span> % (<br>    global_project_info[<span class="hljs-string">&quot;image&quot;</span>], global_project_info[<span class="hljs-string">&quot;jar_path&quot;</span>] + jar_list[<span class="hljs-number">0</span>])<br><br>print(docker_build_shell)<br>docker_build_result = os.system(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">cd ../</span><br><span class="hljs-string">%s</span><br><span class="hljs-string">&quot;&quot;&quot;</span> % (docker_build_shell))<br><br><span class="hljs-keyword">if</span> docker_build_result != <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Docker镜像编译失败&quot;</span>)<br><br>print(<span class="hljs-string">&quot;build image success&quot;</span>)<br><br>docker_push_result = os.system(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">docker tag %s %s</span><br><span class="hljs-string">docker push %s</span><br><span class="hljs-string">&quot;&quot;&quot;</span> % (global_project_info[<span class="hljs-string">&quot;image&quot;</span>], global_project_info[<span class="hljs-string">&quot;remote_image&quot;</span>], global_project_info[<span class="hljs-string">&quot;remote_image&quot;</span>]))<br>print(<span class="hljs-string">&quot;push image success&quot;</span>)<br><br><span class="hljs-keyword">if</span> docker_push_result != <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Docker镜像推送失败&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>deploy.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 部署脚本</span><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">from</span> deploy_to_docker <span class="hljs-keyword">import</span> deploy_to_docker<br><span class="hljs-keyword">from</span> deploy_to_k8s <span class="hljs-keyword">import</span> deploy_to_k8s<br><br>GLOBAL_PROJECT_INFO = <span class="hljs-string">&#x27;global_project_info.json&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(GLOBAL_PROJECT_INFO, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    global_project_info = json.load(f)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">develop_process</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    开发环境使用docker部署</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    deploy_to_docker(global_project_info)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_process</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    测试环境部署到 K8s环境</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    deploy_to_k8s(global_project_info)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">master_process</span>():</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> global_project_info[<span class="hljs-string">&quot;branch&quot;</span>] == <span class="hljs-string">&quot;develop&quot;</span>:<br>        develop_process()<br>    <span class="hljs-keyword">if</span> global_project_info[<span class="hljs-string">&quot;branch&quot;</span>] == <span class="hljs-string">&quot;test&quot;</span>:<br>        test_process()<br>    <span class="hljs-keyword">if</span> global_project_info[<span class="hljs-string">&quot;branch&quot;</span>] == <span class="hljs-string">&quot;master&quot;</span>:<br>        master_process()<br><br></code></pre></td></tr></table></figure><p>deploy_to_docker</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> remote_cmd <span class="hljs-keyword">import</span> ssh_exec_command<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deploy_to_docker</span>(<span class="hljs-params">global_project_info: <span class="hljs-built_in">dict</span>, remote_user=<span class="hljs-string">&quot;root&quot;</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    部署到docker环境</span><br><span class="hljs-string">    部署实例数仅machine有效</span><br><span class="hljs-string">    :param global_project_info: 全局项目信息</span><br><span class="hljs-string">    :param remote_ip_list:</span><br><span class="hljs-string">    :param port:</span><br><span class="hljs-string">    :param remote_user:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    project_name = global_project_info[<span class="hljs-string">&#x27;project_name&#x27;</span>]<br>    java_opts = global_project_info[<span class="hljs-string">&#x27;java_opts&#x27;</span>]<br>    profile = global_project_info[<span class="hljs-string">&#x27;profile&#x27;</span>]<br>    remote_image = global_project_info[<span class="hljs-string">&#x27;remote_image&#x27;</span>]<br>    port = global_project_info[<span class="hljs-string">&#x27;expose&#x27;</span>]<br><br>    remote_ip_str = global_project_info[<span class="hljs-string">&quot;machine&quot;</span>]<br>    remote_ip_list = remote_ip_str.split(<span class="hljs-string">&quot;,&quot;</span>)<br>    <span class="hljs-keyword">for</span> remote_ip <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(remote_ip_list)):<br>        <span class="hljs-keyword">if</span> global_project_info[<span class="hljs-string">&quot;skywalking&quot;</span>] <span class="hljs-keyword">and</span> global_project_info[<span class="hljs-string">&quot;skywalking_image&quot;</span>]:<br>            skywalking_host = global_project_info[<span class="hljs-string">&quot;skywalking_host&quot;</span>]<br>            skywalking_java_opts = <span class="hljs-string">&#x27;-javaagent:agent/skywalking-agent.jar -Dskywalking.agent.service_name=&#x27;</span> + project_name + <span class="hljs-string">&#x27; -Dskywalking.collector.backend_service=&#x27;</span> + skywalking_host<br>        <span class="hljs-keyword">else</span>:<br>            skywalking_java_opts = <span class="hljs-string">&quot;&quot;</span><br><br>        cmd = <span class="hljs-string">&quot;docker rm -f %s || true&quot;</span> % project_name<br>        cmd_result = ssh_exec_command(remote_ip, remote_user, <span class="hljs-literal">None</span>, cmd)<br>        <span class="hljs-comment"># if not cmd_result:</span><br>        <span class="hljs-comment">#     raise Exception(&quot;删除容器失败&quot;)</span><br><br>        cmd = <span class="hljs-string">&quot;docker pull %s&quot;</span> % remote_image<br>        print(remote_ip, remote_user)<br>        cmd_result = ssh_exec_command(remote_ip, remote_user, <span class="hljs-literal">None</span>, cmd)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cmd_result:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;拉取镜像失败&quot;</span>)<br><br>        cmd = <span class="hljs-string">&quot;docker run --name=%s --restart=always -p %s:%s -d -e JAVA_OPTS=&#x27;%s %s -Dspring.profiles.active=%s&#x27; %s&quot;</span> % (<br>            project_name, port, port, skywalking_java_opts, java_opts, profile, remote_image)<br>        cmd_result = ssh_exec_command(remote_ip, remote_user, <span class="hljs-literal">None</span>, cmd)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cmd_result:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;运行容器失败&quot;</span>)<br>        print(cmd_result)<br><br></code></pre></td></tr></table></figure><p>deploy_to_k8s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">from</span> remote_cmd <span class="hljs-keyword">import</span> ssh_exec_command<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">template_process</span>(<span class="hljs-params">template, project_name, remote_image, port, replicas, env</span>):</span><br>    kuber_file = <span class="hljs-built_in">str</span>(template).replace(<span class="hljs-string">&quot;$&#123;project_name&#125;&quot;</span>, project_name)<br>    kuber_file = kuber_file.replace(<span class="hljs-string">&quot;$&#123;remote_image&#125;&quot;</span>, remote_image)<br>    kuber_file = kuber_file.replace(<span class="hljs-string">&quot;$&#123;port&#125;&quot;</span>, port)<br>    <span class="hljs-comment"># kuber_file = kuber_file.replace(&quot;$&#123;node_port&#125;&quot;, node_port)</span><br>    kuber_file = kuber_file.replace(<span class="hljs-string">&quot;$&#123;replicas&#125;&quot;</span>, <span class="hljs-built_in">str</span>(replicas))<br>    kuber_file = kuber_file.replace(<span class="hljs-string">&quot;$&#123;java_opts&#125;&quot;</span>, <span class="hljs-built_in">str</span>(env))<br>    <span class="hljs-keyword">return</span> kuber_file<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deploy_to_k8s</span>(<span class="hljs-params">global_project_info: <span class="hljs-built_in">dict</span>, remote_user=<span class="hljs-string">&quot;root&quot;</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    部署到 k8s环境</span><br><span class="hljs-string">    machine 仅代表 master所在节点，</span><br><span class="hljs-string">    replicas 用来控制实例数</span><br><span class="hljs-string">    env JAVA_OPTS=&#x27;%s %s -Dspring.profiles.active=%s&#x27;</span><br><span class="hljs-string">    :param global_project_info: 全局项目信息</span><br><span class="hljs-string">    :param remote_ip_list:</span><br><span class="hljs-string">    :param port:</span><br><span class="hljs-string">    :param remote_user:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    java_opts = global_project_info[<span class="hljs-string">&#x27;java_opts&#x27;</span>]<br>    profile = global_project_info[<span class="hljs-string">&#x27;profile&#x27;</span>]<br>    project_name = global_project_info[<span class="hljs-string">&#x27;project_name&#x27;</span>]<br><br>    <span class="hljs-keyword">if</span> global_project_info[<span class="hljs-string">&quot;skywalking&quot;</span>] <span class="hljs-keyword">and</span> global_project_info[<span class="hljs-string">&quot;skywalking_image&quot;</span>]:<br>        skywalking_host = global_project_info[<span class="hljs-string">&quot;skywalking_host&quot;</span>]<br>        skywalking_java_opts = <span class="hljs-string">&#x27;-javaagent:agent/skywalking-agent.jar -Dskywalking.agent.service_name=&#x27;</span> + project_name + <span class="hljs-string">&#x27; -Dskywalking.collector.backend_service=&#x27;</span> + skywalking_host<br>    <span class="hljs-keyword">else</span>:<br>        skywalking_java_opts = <span class="hljs-string">&quot;&quot;</span><br>    env = <span class="hljs-string">&quot;%s %s -Dspring.profiles.active=%s&quot;</span> % (skywalking_java_opts, java_opts, profile)<br><br>    template_file = <span class="hljs-string">&quot;cicd/java_k8s_template.yaml&quot;</span><br><br>    k8s_custom = global_project_info.get(<span class="hljs-string">&#x27;k8s_custom&#x27;</span>)<br>    <span class="hljs-keyword">if</span> k8s_custom <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../&quot;</span> + k8s_custom, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            template = f.read()<br>        kuber = template<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(template_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            template = f.read()<br>        kuber = template_process(template, global_project_info[<span class="hljs-string">&quot;project_name&quot;</span>], global_project_info[<span class="hljs-string">&quot;remote_image&quot;</span>],<br>                                 global_project_info[<span class="hljs-string">&quot;expose&quot;</span>], global_project_info[<span class="hljs-string">&quot;replicas&quot;</span>], env)<br><br>    kuber_cmd = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        source .bash_profile</span><br><span class="hljs-string">        echo &quot;%s&quot; | kubectl apply -f -</span><br><span class="hljs-string">        kubectl get po | grep -m1 %s | awk  &#x27;&#123;print $1&#125;&#x27; | xargs -n1 -I&#123;&#125; kubectl delete po &#123;&#125;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span> % (kuber, project_name)<br>    remote_user = <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-comment"># print(kuber_cmd)</span><br>    remote_ip = global_project_info[<span class="hljs-string">&quot;machine&quot;</span>]<br>    ssh_port = global_project_info.get(<span class="hljs-string">&#x27;ssh_port&#x27;</span>)<br>    res = ssh_exec_command(remote_ip, remote_user, <span class="hljs-string">&#x27;&#x27;</span>, kuber_cmd,port=ssh_port)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;执行 K8s 命令失败&quot;</span>)<br>    print(res)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    GLOBAL_PROJECT_INFO = <span class="hljs-string">&#x27;global_project_info.json&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(GLOBAL_PROJECT_INFO, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        global_project_info = json.load(f)<br>    deploy_to_k8s(global_project_info)<br><br></code></pre></td></tr></table></figure><p>java_k8s_template.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;project_name&#125;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-string">$&#123;replicas&#125;</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">$&#123;project_name&#125;</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">$&#123;project_name&#125;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;project_name&#125;</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">$&#123;remote_image&#125;</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JAVA_OPTS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;$&#123;java_opts&#125;&#x27;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-string">$&#123;port&#125;</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jiezsecret</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;project_name&#125;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">$&#123;project_name&#125;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;port&#125;</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-string">$&#123;port&#125;</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-string">$&#123;port&#125;</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http-port</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">$&#123;project_name&#125;</span><br></code></pre></td></tr></table></figure><p>deploy_test.yaml 部分配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">project:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">project_name:</span> <span class="hljs-string">xxxx-basics-eureka</span><br>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">limit_memory:</span> <span class="hljs-string">1G</span><br>    <span class="hljs-attr">registry:</span> <span class="hljs-string">registry-intl.cn-hangzhou.aliyuncs.com/default_au</span><br>    <span class="hljs-attr">machine:</span> <span class="hljs-string">xx.xx.xx.195</span><br>    <span class="hljs-attr">ssh_port:</span> <span class="hljs-number">22</span><br>    <span class="hljs-attr">java_opts:</span> <span class="hljs-string">&#x27;-Xms512m -Xmx512m&#x27;</span><br>    <span class="hljs-attr">skywalking:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">skywalking_host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-string">.xx:11800</span><br>    <span class="hljs-attr">k8s_custom:</span> <span class="hljs-string">kuber-test.yaml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">project_name:</span> <span class="hljs-string">superpay-basics-config</span><br>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">limit_memory:</span> <span class="hljs-string">1G</span><br>    <span class="hljs-attr">registry:</span> <span class="hljs-string">registry-intl.cn-hangzhou.aliyuncs.com/default_au</span><br>    <span class="hljs-attr">machine:</span> <span class="hljs-string">xx.xx.xx.xx</span><br>    <span class="hljs-attr">ssh_port:</span> <span class="hljs-number">22</span><br>    <span class="hljs-attr">java_opts:</span> <span class="hljs-string">&#x27;-Xms512m -Xmx512m&#x27;</span><br>    <span class="hljs-attr">skywalking:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">skywalking_host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-string">.xx:11800</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>cicd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes kubeadm 安装.md</title>
    <link href="/2021/06/06/kubernetes%20kubeadm%20%E5%AE%89%E8%A3%85/"/>
    <url>/2021/06/06/kubernetes%20kubeadm%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><table><thead><tr><th>IP 地址</th><th>主机名</th><th>角色</th><th>说明</th></tr></thead><tbody><tr><td>192.168.1.39</td><td>k8s-master-lb, k8s-master-lb.jz-sz.com</td><td>负载均衡</td><td>虚拟 IP</td></tr><tr><td>192.168.1.40</td><td>k8s-master01, k8s-master01.jz-sz.com</td><td>master</td><td>master 节点</td></tr><tr><td>192.168.1.41</td><td>k8s-master02, k8s-master02.jz-sz.com</td><td>master</td><td>master 节点</td></tr><tr><td>192.168.1.42</td><td>k8s-master03, k8s-master03.jz-sz.com</td><td>master</td><td>master 节点</td></tr><tr><td>192.168.1.46</td><td>k8s-node01, k8s-node01.jz-sz.com</td><td>node</td><td>node 节点</td></tr><tr><td>192.168.1.47</td><td>k8s-node02, k8s-node02.jz-sz.com</td><td>node</td><td>node 节点</td></tr><tr><td>192.168.1.48</td><td>k8s-node03, k8s-node03.jz-sz.com</td><td>node</td><td>node 节点</td></tr><tr><td>192.168.1.49</td><td>k8s-node04, k8s-node04.jz-sz.com</td><td>node</td><td>node 节点</td></tr></tbody></table><h1 id="调整系统参数"><a href="#调整系统参数" class="headerlink" title="调整系统参数"></a>调整系统参数</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> &gt; /etc/sysctl.d/k<span class="hljs-number">8</span>s.conf &lt;&lt; EOF<br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.ip_forward = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.bridge.bridge-nf-call-iptables = <span class="hljs-number">1</span><br><span class="hljs-attribute">fs</span>.may_detach_mounts = <span class="hljs-number">1</span><br><span class="hljs-attribute">vm</span>.overcommit_memory = <span class="hljs-number">1</span><br><span class="hljs-attribute">vm</span>.panic_on_oom = <span class="hljs-number">0</span><br><span class="hljs-attribute">fs</span>.inotify.max_user_watches = <span class="hljs-number">89100</span><br><span class="hljs-attribute">fs</span>.file-max=<span class="hljs-number">52706963</span><br><span class="hljs-attribute">fs</span>.nr_open = <span class="hljs-number">52706963</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_max=<span class="hljs-number">2310720</span><br><br><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_keepalive_time = <span class="hljs-number">600</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_keepalive_probes = <span class="hljs-number">3</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_keepalive_intvl = <span class="hljs-number">15</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_max_tw_buckets = <span class="hljs-number">36000</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_tw_reuse = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_max_orphans = <span class="hljs-number">327680</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_orphans_retries = <span class="hljs-number">3</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_syncookies = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_max_syn_backlog = <span class="hljs-number">16384</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_conntrack_max = <span class="hljs-number">65536</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_max_syn_backlog = <span class="hljs-number">16384</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_timestamps = <span class="hljs-number">0</span><br><span class="hljs-attribute">net</span>.core.somaxconn = <span class="hljs-number">16384</span><br><span class="hljs-attribute">EOF</span><br><span class="hljs-comment"># 立即生效</span><br><span class="hljs-attribute">sysctl</span> --system<br></code></pre></td></tr></table></figure><h1 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install -y yum-utils<br>yum-config-manager --add-repo http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br>yum makecache fast<br>yum list docker-ce --showduplicates<br>yum install -y docker-ce-<span class="hljs-number">18.09</span>.<span class="hljs-number">9</span>-<span class="hljs-number">3</span>.el7 docker-ce-cli-<span class="hljs-number">18.09</span>.<span class="hljs-number">9</span>-<span class="hljs-number">3</span>.el7<br>systemctl enable --now docker<br>cat &gt; <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;192.168.1.138:5000&quot;</span>],<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://3laho3y3.mirror.aliyuncs.com&quot;</span><br>   ],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span><br>&#125;<br>EOF<br>systemctl restart docker<br><span class="hljs-comment"># 测试</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><h1 id="安装基础组件"><a href="#安装基础组件" class="headerlink" title="安装基础组件"></a>安装基础组件</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo<br>cat &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span> &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64/<br>enable=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>repo_gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg<br>              https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg<br>EOF<br><br><br>yum list kubeadm --showduplicates<br></code></pre></td></tr></table></figure><h1 id="版本太新，阿里云镜像不支持"><a href="#版本太新，阿里云镜像不支持" class="headerlink" title="版本太新，阿里云镜像不支持"></a>版本太新，阿里云镜像不支持</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y kubelet-<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>-<span class="hljs-number">0</span> kubeadm-<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>-<span class="hljs-number">0</span> kubectl-<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>-<span class="hljs-number">0</span><br><span class="hljs-attribute">systemctl</span> enable --now kubelet<br></code></pre></td></tr></table></figure><h1 id="检查初始化需要的镜像"><a href="#检查初始化需要的镜像" class="headerlink" title="检查初始化需要的镜像"></a>检查初始化需要的镜像</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> config images list<br><span class="hljs-attribute">k8s</span>.gcr.io/kube-apiserver:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">k8s</span>.gcr.io/kube-controller-manager:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">k8s</span>.gcr.io/kube-scheduler:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">k8s</span>.gcr.io/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">k8s</span>.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">k8s</span>.gcr.io/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">15</span>-<span class="hljs-number">0</span><br><span class="hljs-attribute">k8s</span>.gcr.io/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="使用阿里云并标记"><a href="#使用阿里云并标记" class="headerlink" title="使用阿里云并标记"></a>使用阿里云并标记</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/&#123;镜像名称&#125;:&#123;版本&#125;<br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/&#123;镜像名称&#125;:&#123;版本&#125; k<span class="hljs-number">8</span>s.gcr.io/&#123;镜像名称&#125;:&#123;版本&#125;<br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">15</span>-<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span><br><br><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> k<span class="hljs-number">8</span>s.gcr.io/kube-apiserver:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> k<span class="hljs-number">8</span>s.gcr.io/kube-controller-manager:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> k<span class="hljs-number">8</span>s.gcr.io/kube-scheduler:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> k<span class="hljs-number">8</span>s.gcr.io/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span> k<span class="hljs-number">8</span>s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">15</span>-<span class="hljs-number">0</span> k<span class="hljs-number">8</span>s.gcr.io/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">15</span>-<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span> k<span class="hljs-number">8</span>s.gcr.io/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span><br><br><br><span class="hljs-attribute">docker</span> pull quay.mirrors.ustc.edu.cn/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span><br><span class="hljs-attribute">docker</span> tag quay.mirrors.ustc.edu.cn/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span> quay.io/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h1 id="初始化-master"><a href="#初始化-master" class="headerlink" title="初始化 master"></a>初始化 master</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 添加地址，方便后续高可用，阿里云或其它云请直接使用slb</span><br>ip addr <span class="hljs-builtin-name">add</span> 192.168.122.200/32 dev eth0<br><span class="hljs-comment"># 可选，生成初始化yaml</span><br>kubeadm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">print</span> init-defaults &gt; init-defaults.yaml<br>kubeadm init <span class="hljs-attribute">--kubernetes-version</span>=1.16.6 \<br>--pod-network-cidr 10.244.0.0/16 \<br>--service-cidr 172.21.0.0/20 \<br><span class="hljs-attribute">--apiserver-advertise-address</span>=0.0.0.0 \<br>--control-plane-endpoint <span class="hljs-string">&quot;192.168.122.200:6443&quot;</span> \<br>--upload-certs \<br><span class="hljs-attribute">--ignore-preflight-errors</span>=swap<br><span class="hljs-comment"># 失败重置</span><br>kubeadm reset<br>rm -rf <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-comment"># 普通用户使用 kubectl</span><br>mkdir -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-comment"># 也可以使用环境变量</span><br>scp k8s-master:/etc/kubernetes/admin.conf /etc/kubernetes/<br>echo <span class="hljs-string">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile<br>source .bash_profile<br></code></pre></td></tr></table></figure><h1 id="配置网络，使用-flannel"><a href="#配置网络，使用-flannel" class="headerlink" title="配置网络，使用 flannel"></a>配置网络，使用 flannel</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/Documentation/</span>kube-flannel.yml<br><span class="hljs-comment"># 替换为对应网段</span><br>net-conf.json: |<br>    &#123;<br>      <span class="hljs-string">&quot;Network&quot;</span>: <span class="hljs-string">&quot;10.244.0.0/16&quot;</span>,<br>      <span class="hljs-string">&quot;Backend&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;vxlan&quot;</span><br>      &#125;<br>    &#125;<br>docker pull quay.mirrors.ustc.edu.cn<span class="hljs-regexp">/coreos/</span>flannel:v0.<span class="hljs-number">12.0</span>-amd64<br>docker tag quay.mirrors.ustc.edu.cn<span class="hljs-regexp">/coreos/</span>flannel:v0.<span class="hljs-number">12.0</span>-amd64 quay.io<span class="hljs-regexp">/coreos/</span>flannel:v0.<span class="hljs-number">12.0</span>-amd64<br>kubectl apply -f kube-flannel.yml<br></code></pre></td></tr></table></figure><h1 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> nodes<br><span class="hljs-comment"># 检查集群配置</span><br>kubectl -n kube-system <span class="hljs-builtin-name">get</span> cm kubeadm-config -o yaml<br></code></pre></td></tr></table></figure><h1 id="node-拉取镜像"><a href="#node-拉取镜像" class="headerlink" title="node 拉取镜像"></a>node 拉取镜像</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span><br><br><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> k<span class="hljs-number">8</span>s.gcr.io/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span> k<span class="hljs-number">8</span>s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span> k<span class="hljs-number">8</span>s.gcr.io/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span><br><br><br><span class="hljs-attribute">docker</span> pull quay.mirrors.ustc.edu.cn/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span><br><span class="hljs-attribute">docker</span> tag quay.mirrors.ustc.edu.cn/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span> quay.io/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h1 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 添加 master</span><br>kubeadm init phase upload-certs --upload-certs<br>kubeadm <span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span> --<span class="hljs-keyword">print</span>-join-command<br><span class="hljs-meta"># 合并</span><br>kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.252</span>:<span class="hljs-number">6443</span> --<span class="hljs-built_in">token</span> qmihb0<span class="hljs-number">.2</span>j6ikktkew8ch3vz     --discovery-<span class="hljs-built_in">token</span>-ca-cert-hash sha256:db586028c918052bfb1b657472a4bee3d114de93b809b5ff8b53b3b7bded665a \<br>--control-plane --certificate-<span class="hljs-built_in">key</span> <span class="hljs-number">0</span>b84889916022953e6777da8babe9b643131d104a1d7f91db1a6ae7ddc60d18b<br><span class="hljs-meta"># 添加 node</span><br>kubeadm <span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span> --<span class="hljs-keyword">print</span>-join-command<br>kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.252</span>:<span class="hljs-number">6443</span> --<span class="hljs-built_in">token</span> uopfdg.haazo24wvd8qxxxd \<br>    --discovery-<span class="hljs-built_in">token</span>-ca-cert-hash sha256:db586028c918052bfb1b657472a4bee3d114de93b809b5ff8b53b3b7bded665a<br><span class="hljs-meta"># 删除节点</span><br>kubectl drain NODE_ID --<span class="hljs-keyword">delete</span>-<span class="hljs-keyword">local</span>-data --force --ignore-daemonsets<br>kubectl <span class="hljs-keyword">delete</span> node NODE_ID<br>kubeadm reset<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#  查看集群版本信息</span><br>kubectl version <span class="hljs-attribute">--short</span>=<span class="hljs-literal">true</span><br>kubectl cluster-info<br><span class="hljs-comment"># 查看所有pod 状态</span><br>kubectl <span class="hljs-builtin-name">get</span> pods <span class="hljs-attribute">--namespace</span>=kube-system<br><span class="hljs-comment"># 查看 pod 状态</span><br>kubectl describe pod kub-proxy-t64ab <span class="hljs-attribute">--namespace</span>=kube-system<br></code></pre></td></tr></table></figure><h1 id="安装-helm"><a href="#安装-helm" class="headerlink" title="安装 helm"></a>安装 helm</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> version<br><span class="hljs-attribute">docker</span> pull registry.cn-hangzhou.aliyuncs.com/kubernetes-helm/tiller:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">docker</span> tag quay.mirrors.ustc.edu.cn/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span> quay.io/coreos/flannel:v<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-amd<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker pull quay.mirrors.ustc.edu.cn quay 镜像错误：net<span class="hljs-regexp">/http: TLS handshake timeout ，将https:/</span><span class="hljs-regexp">/quay.mirrors.ustc.edu.cn&quot; 加入/</span>etc<span class="hljs-regexp">/docker/</span>daemon.json register-mirrors<br>cgdriver 不一致导致不能启动问题<br>cat <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>cat <span class="hljs-regexp">/etc/</span>sysconfig/kubelet<br>KUBELET_EXTRA_ARGS=--cgroup-driver=systemd<br>重启 pod<br>kubectl get pod &#123;podname&#125; -n &#123;namespace&#125; -o yaml | kubectl replace --force -f -<br>kubectl <span class="hljs-keyword">delete</span> pod -n &#123;namespace&#125; &#123;podname&#125;s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录一次线上宕机的问题2020_02_20.md</title>
    <link href="/2021/02/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E5%AE%95%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%982020-02-20-md/"/>
    <url>/2021/02/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E5%AE%95%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%982020-02-20-md/</url>
    
    <content type="html"><![CDATA[<p>今天一个核心系统宕机了，导致所有服务不可用，在自动重启后又恢复了。</p><p>下面记录整个排查过程</p><p>我们使用的环境是 docker<br>JDK 版本 1.8<br>参数是</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">JVM_OPTIONS</span>=<span class="hljs-string">&quot;-Xms2048M -Xmx2048M -Xss512K -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=68 -XX:ParallelGCThreads=4 -XX:+CMSClassUnloadingEnabled -Xloggc:logs/gc.log -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintGCDetails&quot;</span><br><span class="hljs-attr">LIMIT_MEMORY</span>=<span class="hljs-number">2.5</span>G<br><span class="hljs-attr">SERVICE_REPLICAS</span>=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>新生代老年代默认比例是 1:2<br>最大内存是 2G<br>老年代是 1365M</p><p>通过 JProfiler 分析 dump 文件<br><img src="/2021/02/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E5%AE%95%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%982020-02-20-md/biggestobject.png" alt="步骤"></p><p>发现有一个大对象，600 多 M</p><p>查看对象引用<br><img src="/2021/02/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E5%AE%95%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%982020-02-20-md/objref.png" alt="步骤"></p><p>发现对象是来自于 MemoryCacheStore 这个类，然后可以定位到代码。</p><p>代码发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自定义缓存管理器</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> SecurityMemoryCacheManager cacheManager = <span class="hljs-keyword">new</span> SecurityMemoryCacheManager();<br><br>-------<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityMemoryCacheManager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleCacheManager</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Cache <span class="hljs-title">getMissingCache</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConcurrentMapCache(CACHE_NAME_PREFIX + name);<br>    &#125;<br>&#125;<br><br><br>-------<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentMapCache</span><span class="hljs-params">(String name)</span> </span>&#123;<br>  <span class="hljs-keyword">this</span>(name, <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-number">256</span>), <span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码确实发现了一个 ConcurrentHashMap</p><p>进一步分析业务逻辑，<br>发现这个 map 是第一个架构师写的用于存储 token 和权限的。<br>实际上已经没有用到了，但是陈年老代码，也没有删除。</p><p>为什么会在这个时间出现也分析了一下原因。<br>以前这个系统经常有功能要上线，一般一个星期就会发版重启一次，但是年前那段时间，没有新功能，也就没有发版，又过了一个年，导致内存占用越来越多。<br>直到 OOM。索性系统会自动恢复，没有造成巨大影响。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>多路复用IO.md</title>
    <link href="/2021/01/24/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8IO-md/"/>
    <url>/2021/01/24/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8IO-md/</url>
    
    <content type="html"><![CDATA[<p>多路复用的一些参考文章</p><span id="more"></span><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ol><li>select 用法&amp;原理详解（源码剖析）<br><a href="https://blog.csdn.net/zhougb3/article/details/79792089">https://blog.csdn.net/zhougb3/article/details/79792089</a></li><li>深入 select 多路复用内核源码加驱动实现<br><a href="https://my.oschina.net/fileoptions/blog/911091">https://my.oschina.net/fileoptions/blog/911091</a></li><li>彻底搞懂 epoll 高效运行的原理<br><a href="https://blog.csdn.net/y277an/article/details/97622206">https://blog.csdn.net/y277an/article/details/97622206</a></li></ol><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>select 是通过 bitmap 来记录所有文件描述符的，所以有最大 1024 个的限制。<br>1024 是内核默认的定义，如果想突破，需要重新编译。</p><h2 id="进化路线"><a href="#进化路线" class="headerlink" title="进化路线"></a>进化路线</h2><p>select ：<br>缺点：</p><ol><li>1024 的最大值上限。</li><li>每次都需要重新构建 fdset</li><li>两次用户态和内核态的拷贝，</li><li>需要遍历整个 fdset</li></ol><p>poll：<br>使用自定义数据结构解决了 select 1024 上限的问题<br>但是还是有其他的缺点</p><p>epoll：<br>epoll 底层使用红黑树和链表<br>epoll 会在内核的内存空间开辟一个存储区，通过 epoll_ctl 设置需要监听的文件描述符。当有 socket 就绪后，会通过回调函数，把文件描述符存储到就绪队列中。<br>当用户态程序调用 epoll_wait 时，返回就绪队列。<br>解决了 select 的其他缺点。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redis_bitmap翻车的记录.md</title>
    <link href="/2020/09/16/redis-bitmap%E7%BF%BB%E8%BD%A6%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/09/16/redis-bitmap%E7%BF%BB%E8%BD%A6%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>今天做一个需求，广告页，要求一天仅显示一次。</p><p>数据是存在 redis 的，当时想着用 bitmap 可以节约空间，一个用户仅需要 1 bit。<br>但是实际使用中，遇到了几个坑。userId 是 long 型的。bitmap 只能用 int。</p><p>这里把 long hash 成 int，能解决，但是有 hash 碰撞的风险。不过就算发生了 hash 碰撞也无所谓，</p><span id="more"></span><p>然后按这个方案继续。能成功，一切正常。</p><p>但是无意中去 redis 看的时候，这个 key 的 大小有 100M。<br>只存一个用户也是 100M。<br>然后我还是按不同的商户存不同的 bitmap。<br>还好是在测试环境发现了，如果上了生产，就可以直接找工作了。。。</p><p>这里分析一下。</p><p>bitmap 缺失可以节约空间，一个用户最多是 256M,一亿个用户也是 256M。</p><p>但是我们用户少啊。。用这个方案就不太合适了</p><p>然后 我们的用户 Id 是雪花算法 Id，不是连续的，其实用 bitmap 也不适合</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>注解实现字段自动解密</title>
    <link href="/2020/07/10/%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E8%A7%A3%E5%AF%86/"/>
    <url>/2020/07/10/%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E8%A7%A3%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<p>最近有个项目要传输密码，密码当然不能明文传输。需要前端加密，后端解密。<br>加密算法使用 RSA。</p><p>使用注解加 AOP 实现</p><span id="more"></span><p>RSA 工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.security.spec.InvalidKeySpecException;<br><span class="hljs-keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;<br><span class="hljs-keyword">import</span> java.security.spec.X509EncodedKeySpec;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chaoli</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-07-09 10:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RSAUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">//非对称密钥算法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_ALGORITHM = <span class="hljs-string">&quot;RSA&quot;</span>;<br>    <span class="hljs-comment">//密钥长度，在512到65536位之间，建议不要太长，否则速度很慢，生成的加密数据很长</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> KEY_SIZE = <span class="hljs-number">512</span>;<br>    <span class="hljs-comment">//字符编码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHARSET = <span class="hljs-string">&quot;UTF-8&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成密钥对</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> KeyPair 密钥对</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KeyPair <span class="hljs-title">getKeyPair</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> getKeyPair(<span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成密钥对</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 生成密钥对的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KeyPair <span class="hljs-title">getKeyPair</span><span class="hljs-params">(String password)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//实例化密钥生成器</span><br>        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-comment">//初始化密钥生成器</span><br>        <span class="hljs-keyword">if</span>(password == <span class="hljs-keyword">null</span>)&#123;<br>            keyPairGenerator.initialize(KEY_SIZE);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            SecureRandom secureRandom = SecureRandom.getInstance(<span class="hljs-string">&quot;SHA1PRNG&quot;</span>);<br>            secureRandom.setSeed(password.getBytes(CHARSET));<br>            keyPairGenerator.initialize(KEY_SIZE, secureRandom);<br>        &#125;<br>        <span class="hljs-comment">//生成密钥对</span><br>        <span class="hljs-keyword">return</span> keyPairGenerator.generateKeyPair();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取得私钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPair 密钥对</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> byte[] 私钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] getPrivateKeyBytes(KeyPair keyPair) &#123;<br>        <span class="hljs-keyword">return</span> keyPair.getPrivate().getEncoded();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取得Base64编码的私钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPair 密钥对</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String Base64编码的私钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPrivateKey</span><span class="hljs-params">(KeyPair keyPair)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(getPrivateKeyBytes(keyPair));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取得公钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPair 密钥对</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> byte[] 公钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] getPublicKeyBytes(KeyPair keyPair) &#123;<br>        <span class="hljs-keyword">return</span> keyPair.getPublic().getEncoded();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取得Base64编码的公钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPair 密钥对</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String Base64编码的公钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPublicKey</span><span class="hljs-params">(KeyPair keyPair)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(getPublicKeyBytes(keyPair));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私钥加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       待加密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> byte[] 加密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] privateKey) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//实例化密钥工厂</span><br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-comment">//生成私钥</span><br>        PrivateKey key = keyFactory.generatePrivate(<span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(privateKey));<br>        <span class="hljs-comment">//数据加密</span><br>        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM);<br>        cipher.init(Cipher.ENCRYPT_MODE, key);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私钥加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       待加密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey Base64编码的私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String Base64编码的加密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encryptByPrivateKey</span><span class="hljs-params">(String data, String privateKey)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(privateKey);<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(encryptByPrivateKey(data.getBytes(CHARSET), key));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公钥加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      待加密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> byte[] 加密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encryptByPublicKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] publicKey) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//实例化密钥工厂</span><br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-comment">//生成公钥</span><br>        PublicKey key = keyFactory.generatePublic(<span class="hljs-keyword">new</span> X509EncodedKeySpec(publicKey));<br>        <span class="hljs-comment">//数据加密</span><br>        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM);<br>        cipher.init(Cipher.ENCRYPT_MODE, key);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公钥加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      待加密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey Base64编码的公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String Base64编码的加密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encryptByPublicKey</span><span class="hljs-params">(String data, String publicKey)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(publicKey);<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(encryptByPublicKey(data.getBytes(CHARSET), key));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私钥解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> byte[] 解密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] privateKey) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//实例化密钥工厂</span><br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-comment">//生成私钥</span><br>        PrivateKey key = keyFactory.generatePrivate(<span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(privateKey));<br>        <span class="hljs-comment">//数据解密</span><br>        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM);<br>        cipher.init(Cipher.DECRYPT_MODE, key);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私钥解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       Base64编码的待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey Base64编码的私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String 解密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">decryptByPrivateKey</span><span class="hljs-params">(String data, String privateKey)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(privateKey);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(decryptByPrivateKey(Base64.getDecoder().decode(data), key), CHARSET);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公钥解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> byte[] 解密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decryptByPublicKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] publicKey) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//实例化密钥工厂</span><br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-comment">//产生公钥</span><br>        PublicKey key = keyFactory.generatePublic(<span class="hljs-keyword">new</span> X509EncodedKeySpec(publicKey));<br>        <span class="hljs-comment">//数据解密</span><br>        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM);<br>        cipher.init(Cipher.DECRYPT_MODE, key);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公钥解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      Base64编码的待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey Base64编码的公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String 解密数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">decryptByPublicKey</span><span class="hljs-params">(String data, String publicKey)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(publicKey);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(decryptByPublicKey(Base64.getDecoder().decode(data), key), CHARSET);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试加解密方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//生成密钥对，一般生成之后可以放到配置文件中</span><br>       KeyPair keyPair = RSAUtil.getKeyPair();<br>       <span class="hljs-comment">//公钥</span><br>       String publicKey = RSAUtil.getPublicKey(keyPair);<br>       <span class="hljs-comment">//私钥</span><br>       String privateKey = RSAUtil.getPrivateKey(keyPair);<br><br>        System.out.println(<span class="hljs-string">&quot;公钥：\n&quot;</span> + publicKey);<br>        System.out.println(<span class="hljs-string">&quot;私钥：\n&quot;</span> + privateKey);<br><br>        String data = <span class="hljs-string">&quot;123321&quot;</span>;<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;\n===========私钥加密，公钥解密==============&quot;</span>);<br>            String s1 = RSAUtil.encryptByPrivateKey(data, privateKey);<br>            System.out.println(<span class="hljs-string">&quot;加密后的数据:&quot;</span> + s1);<br>            String s2 = RSAUtil.decryptByPublicKey(s1, publicKey);<br>            System.out.println(<span class="hljs-string">&quot;解密后的数据:&quot;</span> + s2 + <span class="hljs-string">&quot;\n\n&quot;</span>);<br>        &#125;<br><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;\n===========公钥加密，私钥解密==============&quot;</span>);<br>            String s1 = RSAUtil.encryptByPublicKey(data, publicKey);<br>            System.out.println(<span class="hljs-string">&quot;加密后的数据:&quot;</span> + s1);<br>            String s2 = RSAUtil.decryptByPrivateKey(s1, privateKey);<br>            System.out.println(<span class="hljs-string">&quot;解密后的数据:&quot;</span> + s2 + <span class="hljs-string">&quot;\n\n&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字段注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RSAField &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//声明此注解生命周期  使用runtime可以在运行时动态获得注解信息</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RSAMethod &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>AOP 实现。<br>代理所有加了 RSAMethod 注解的方法，遍历所有参数对象的字段，如果字段有 RSAField 注解，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EncryptDecryptAop</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;privateKey&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String privateKey;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(xx.xx.xx.xx.RSAMethod)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">annotationPointCut</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;annotationPointCut()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">doProcess</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">//捕获方法参数列表</span><br>        List&lt;Object&gt; methodArgs = <span class="hljs-keyword">this</span>.getMethodArgs(proceedingJoinPoint);<br>        <span class="hljs-comment">//循环所有参数</span><br>        <span class="hljs-keyword">for</span> (Object item : methodArgs) &#123;<br>            <span class="hljs-comment">//捕获参数类中的所有字段</span><br>            Field[] fields = item.getClass().getDeclaredFields();<br>            <span class="hljs-comment">//遍历所有字段</span><br>            <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>                <span class="hljs-comment">//若该字段被EncryptField注解,则进行加密</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != AnnotationUtils.findAnnotation(field, RSAField.class)) &#123;<br>                    String raw = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//设置private类型允许访问</span><br>                        field.setAccessible(Boolean.TRUE);<br>                        raw = field.get(item).toString();<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (raw == <span class="hljs-keyword">null</span> || raw.isEmpty()) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br><span class="hljs-comment">//                    log.info(&quot;&#123;&#125;解密前&#123;&#125;&quot;, field.getName(), raw);</span><br>                    String decrypt = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//解密</span><br>                        decrypt = RSAUtil.decryptByPrivateKey(raw, privateKey);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        log.warn(<span class="hljs-string">&quot;RAS解密失败&#123;&#125;&quot;</span>, field.getName());<br>                        <span class="hljs-comment">// throw new ServiceException(ErrorEnums.PARAM_ERROR.getCode(), &quot;加密解密失败&quot;);</span><br>                    &#125;<br>                    field.set(item, decrypt);<br><span class="hljs-comment">//                    log.info(&quot;&#123;&#125;解密后&#123;&#125;&quot;, field.getName(), field.get(item).toString());</span><br>                    field.setAccessible(Boolean.FALSE);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> proceedingJoinPoint.proceed();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取方法请求参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;Object&gt; <span class="hljs-title">getMethodArgs</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;<br>        List&lt;Object&gt; methodArgs = Lists.newArrayList();<br>        <span class="hljs-keyword">for</span> (Object arg : proceedingJoinPoint.getArgs()) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != arg) &#123;<br>                methodArgs.add(arg);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> methodArgs;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>let&#39;s encrypt 证书</title>
    <link href="/2020/07/06/let&#39;s%20encrypt%20%E8%AF%81%E4%B9%A6/"/>
    <url>/2020/07/06/let&#39;s%20encrypt%20%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 安装依赖</span><br><span class="hljs-meta"># CentOS</span><br>yum install socat curl<br><span class="hljs-meta"># Debian</span><br>apt install socat curl<br><span class="hljs-meta"># 注意安全</span><br>curl https:<span class="hljs-comment">//get.acme.sh | sh手动配置</span><br><span class="hljs-meta"># 安装目录</span><br>$HOME/.acme.sh/<br></code></pre></td></tr></table></figure><blockquote><p>泛域名证书，只支持 DNS 验证，未核实</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><br><span class="hljs-comment"># 本机http验证，单域名</span><br>acme.sh <span class="hljs-params">--issue</span> -d kldidi.com <span class="hljs-params">--nginx</span> <span class="hljs-string">/usr/local/nginx/conf/nginx.conf</span><br><br><span class="hljs-comment"># 本机网站根目录验证，单域名</span><br>acme.sh <span class="hljs-params">--issue</span> -d kldidi.com <span class="hljs-params">--webroot</span> <span class="hljs-string">/data/www</span><br><span class="hljs-comment"># --keylength ec-256 是签发 ECC 类型的证书</span><br><br><span class="hljs-comment"># dns 验证，通配</span><br>acme.sh <span class="hljs-params">--issue</span> <span class="hljs-params">--dns</span> -d kldidi.com -d *<span class="hljs-string">.kldidi.com</span><br><br>acme.sh <span class="hljs-params">--issue</span> <span class="hljs-params">--dns</span> -d supaytechgo.com -d *<span class="hljs-string">.supaytechgo.com</span><br><br><span class="hljs-comment"># 显示相应解析记录，需要在域名管理面板中添加这条 `txt` 记录</span><br>acme.sh <span class="hljs-params">--renew</span> -d kldidi.com -d *<span class="hljs-string">.kldidi.com</span><br><br>acme.sh <span class="hljs-params">--renew</span> -d supaytechgo.com -d *<span class="hljs-string">.supaytechgo.com</span><br></code></pre></td></tr></table></figure><h2 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h2><blockquote><p>申请 api token</p></blockquote><p>腾讯云需要去 dnspod.cn 创建 api key</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment"># 腾讯云 dnspod</span><br><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DP_Id</span>=<span class="hljs-string">&quot;id&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DP_Key</span>=<span class="hljs-string">&quot;token&quot;</span><br>～/.acme.sh/acme.sh --issue --dns dns_dp -d kldidi.com -d *.kldidi.com<br><br><span class="hljs-comment"># 阿里云</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">Ali_Key</span>=<span class="hljs-string">&quot;id&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">Ali_Secret</span>=<span class="hljs-string">&quot;token&quot;</span><br><span class="hljs-comment"># 生成证书，会手动生成一个 txt 记录验证，时间间隔 `120s`</span><br>.acme.sh/acme.sh --issue --dns dns_ali -d kldidi.com -d *.kldidi.com<br><br></code></pre></td></tr></table></figure><h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><blockquote><p>acme.sh 每 60 天更新证书</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br># 复制证书<br>~<span class="hljs-regexp">/.acme.sh/</span>acme.sh --installcert -d kldidi.com \<br>--cert-<span class="hljs-keyword">file</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>cert/kldidi.com.cer<br>--key-<span class="hljs-keyword">file</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>cert/kldidi.com.key \<br>--fullchain-<span class="hljs-keyword">file</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>cert/kldidi.com.fullchain.cer \<br>--reloadcmd <span class="hljs-string">&quot;/usr/local/nginx/sbin/nginx -s reload&quot;</span><br></code></pre></td></tr></table></figure><h2 id="配置-apache2"><a href="#配置-apache2" class="headerlink" title="配置 apache2"></a>配置 apache2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># apache debian</span><br>acme.sh --issue -d yorutech.cn<br><br>mkdir -p /etc/apache2/certs<br><br><span class="hljs-comment"># 复制证书</span><br>acme.sh --install-cert -d yorutech.cn \<br>--cert-file      /etc/apache2/certs/yorutech.cn.cer  \<br>--key-file       /etc/apache2/certs/yorutech.cn.key \<br>--fullchain-file /etc/apache2/certs/fullchain.cer \<br>--reloadcmd     <span class="hljs-string">&quot;systemctl reload apache2&quot;</span><br></code></pre></td></tr></table></figure><h2 id="更新-acme-sh"><a href="#更新-acme-sh" class="headerlink" title="更新 acme.sh"></a>更新 acme.sh</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 查看更新证书计划任务</span><br><span class="hljs-string">crontab</span> -<span class="hljs-string">l</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><span class="hljs-comment"># 手动</span><br><span class="hljs-string">acme</span>.<span class="hljs-string">sh</span> <span class="hljs-built_in">--upgrade</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">#</span> 自动<br><span class="hljs-string">acme</span>.<span class="hljs-string">sh</span> <span class="hljs-built_in">--upgrade</span> <span class="hljs-built_in">--auto-upgrade</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">#</span> 关闭自动<br><span class="hljs-string">acme</span>.<span class="hljs-string">sh</span> <span class="hljs-built_in">--upgrade</span> <span class="hljs-built_in">--auto-upgrade</span> <span class="hljs-string">0</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="多域名，不同-api-key"><a href="#多域名，不同-api-key" class="headerlink" title="多域名，不同 api key"></a>多域名，不同 api key</h2><blockquote><p>方式是新建一个用户，并给序权限</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 创建一个用户</span><br>useradd <span class="hljs-keyword">jieztech</span><br><span class="hljs-keyword">usermod </span>-aG cent <span class="hljs-keyword">jieztech</span><br></code></pre></td></tr></table></figure><h2 id="Windows-IIS"><a href="#Windows-IIS" class="headerlink" title="Windows IIS"></a>Windows IIS</h2><blockquote><p>仅用于本地 IIS，系统要求 Windows Server 2012 R2 SP1 +</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载对应 win 应用</span><br>https://github.com/win-acme/win-acme/releases<br><span class="hljs-comment"># 以管理员身份运行</span><br><span class="hljs-comment"># wacs.exe 按提示操作即可</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis拦截器实现日志</title>
    <link href="/2020/06/22/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97/"/>
    <url>/2020/06/22/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>直接贴代码<br>关于事务还没测试，等以后再更新</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.gvt.i18n.config;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.cache.CacheKey;<br><span class="hljs-keyword">import</span> org.apache.ibatis.executor.Executor;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.BoundSql;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.MappedStatement;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.ParameterMode;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.*;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.Configuration;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.ResultHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.RowBounds;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.TypeHandlerRegistry;<br><br><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chaoli</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-06-22 09:36</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;),</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;)</span><br><span class="hljs-meta">//        @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123;Connection.class, Integer.class&#125;),</span><br><span class="hljs-meta">//        @Signature(type = ParameterHandler.class, method = &quot;setParameters&quot;, args = &#123;PreparedStatement.class&#125;),</span><br><span class="hljs-meta">//        @Signature(type = ResultSetHandler.class, method = &quot;handleResultSets&quot;, args = &#123;Statement.class&#125;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExamplePlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> time;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateFormat DATE_FORMAT = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[<span class="hljs-number">0</span>];<br>        Object parameterObject = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (invocation.getArgs().length &gt; <span class="hljs-number">1</span>) &#123;<br>            parameterObject = invocation.getArgs()[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        Object result = invocation.proceed();<br><br>        String statementId = mappedStatement.getId();<br>        BoundSql boundSql = mappedStatement.getBoundSql(parameterObject);<br>        Configuration configuration = mappedStatement.getConfiguration();<br>        String sql = getSql(boundSql, parameterObject, configuration);<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        <span class="hljs-keyword">long</span> timing = end - start;<br>        <span class="hljs-keyword">if</span> (log.isInfoEnabled() &amp;&amp; timing &gt; <span class="hljs-number">1</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;执行sql耗时:&quot;</span> + timing + <span class="hljs-string">&quot; ms&quot;</span> + <span class="hljs-string">&quot; - id:&quot;</span> + statementId + <span class="hljs-string">&quot; - Sql:&quot;</span>);<br>            log.info(<span class="hljs-string">&quot;   &quot;</span> + sql);<br>        &#125;<br>        <span class="hljs-comment">// todo: 纪录数据库</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Plugin.wrap(o, <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getSql</span><span class="hljs-params">(BoundSql boundSql, Object parameterObject, Configuration configuration)</span> </span>&#123;<br>        String sql = boundSql.getSql().replaceAll(<span class="hljs-string">&quot;[\\s]+&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);<br>        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>        TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();<br>        <span class="hljs-keyword">if</span> (parameterMappings != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameterMappings.size(); i++) &#123;<br>                ParameterMapping parameterMapping = parameterMappings.get(i);<br>                <span class="hljs-keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;<br>                    Object value;<br>                    String propertyName = parameterMapping.getProperty();<br>                    <span class="hljs-keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;<br>                        value = boundSql.getAdditionalParameter(propertyName);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parameterObject == <span class="hljs-keyword">null</span>) &#123;<br>                        value = <span class="hljs-keyword">null</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;<br>                        value = parameterObject;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        MetaObject metaObject = configuration.newMetaObject(parameterObject);<br>                        value = metaObject.getValue(propertyName);<br>                    &#125;<br>                    sql = replacePlaceholder(sql, value);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sql;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">replacePlaceholder</span><span class="hljs-params">(String sql, Object propertyValue)</span> </span>&#123;<br>        String result;<br>        <span class="hljs-keyword">if</span> (propertyValue != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (propertyValue <span class="hljs-keyword">instanceof</span> String) &#123;<br>                result = <span class="hljs-string">&quot;&#x27;&quot;</span> + propertyValue + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propertyValue <span class="hljs-keyword">instanceof</span> Date) &#123;<br>                result = <span class="hljs-string">&quot;&#x27;&quot;</span> + DATE_FORMAT.format(propertyValue) + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result = propertyValue.toString();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result = <span class="hljs-string">&quot;null&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sql.replaceFirst(<span class="hljs-string">&quot;\\?&quot;</span>, Matcher.quoteReplacement(result));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisConfiguration</span> </span>&#123;<br><br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ExamplePlugin <span class="hljs-title">myPlugin</span><span class="hljs-params">()</span> </span>&#123;<br>        ExamplePlugin myPlugin = <span class="hljs-keyword">new</span> ExamplePlugin();<br>        <span class="hljs-comment">//设置参数，比如阈值等，可以在配置文件中配置，这里直接写死便于测试</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        myPlugin.setProperties(properties);<br>        <span class="hljs-keyword">return</span> myPlugin;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建elasticsearch_kibana</title>
    <link href="/2020/06/13/%E6%90%AD%E5%BB%BAelasticsearch-kibana/"/>
    <url>/2020/06/13/%E6%90%AD%E5%BB%BAelasticsearch-kibana/</url>
    
    <content type="html"><![CDATA[<p>docker network create elk<br>docker run -d –name elasticsearch –net elk -p 9200:9200 -p 9300:9300 -e “discovery.type=single-node” elasticsearch:6.5.4<br>docker run -d –name kibana –net elk -p 5601:5601 kibana:6.5.4</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建docker_registry</title>
    <link href="/2020/06/12/%E6%90%AD%E5%BB%BAdocker-registry/"/>
    <url>/2020/06/12/%E6%90%AD%E5%BB%BAdocker-registry/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/gcgc/p/10489385.html">https://www.cnblogs.com/gcgc/p/10489385.html</a></p><p>docker pull registry</p><p>docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 –restart=always –name registry registry:latest</p><p>{<br>“registry-mirrors”: [ “<a href="https://pee6w651.mirror.aliyuncs.com&quot;],&quot;insecure-registries&quot;">https://pee6w651.mirror.aliyuncs.com&quot;],&quot;insecure-registries&quot;</a>: [“192.168.179.128:5000”]<br>}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>编译安装Nginx</title>
    <link href="/2020/06/12/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/2020/06/12/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/dmedaa/article/details/89885889">https://blog.csdn.net/dmedaa/article/details/89885889</a></p><p>./configure –prefix=/usr/local/nginx –with-http_stub_status_module</p><p><a href="http://blog.oneapm.com/apm-tech/412.html">http://blog.oneapm.com/apm-tech/412.html</a></p><p>nginx status 详解<br>active connections – 活跃的连接数量<br>server accepts handled requests — 总共处理了 11989 个连接 , 成功创建 11989 次握手, 总共处理了 11991 个请求<br>reading — 读取客户端的连接数.<br>writing — 响应数据到客户端的数量<br>waiting — 开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>keepalive_docker_nginx实践</title>
    <link href="/2020/06/12/keepalive-docker-nginx%E5%AE%9E%E8%B7%B5/"/>
    <url>/2020/06/12/keepalive-docker-nginx%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>我的本地环境，一台 Unbuntu 18.04 系统的物理机<br>想实践下 虚拟 ip，keepalive<br>就一台机器，所以用 docker 来实践一下。</p><span id="more"></span><p>关于虚拟 ip, 可以看下这篇文章<br><a href="https://www.gitos.org/2019/08/19/vip-ha.html">https://www.gitos.org/2019/08/19/vip-ha.html</a></p><p>关于 docker, keepalive 基本按这篇文章<br><a href="https://www.jianshu.com/p/6a8f38b8076d">https://www.jianshu.com/p/6a8f38b8076d</a></p><p>修改 dockerfile，减少重复下载环境</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:latest<br><span class="hljs-keyword">MAINTAINER</span> relengxing&lt;relengxing@outlook.com&gt;<br><br><span class="hljs-keyword">RUN</span><span class="bash"> yum install -y gcc openssl-devel popt-devel</span><br><span class="hljs-keyword">RUN</span><span class="bash"> yum install -y net-tools</span><br><span class="hljs-keyword">RUN</span><span class="bash"> yum install -y vim</span><br><span class="hljs-keyword">RUN</span><span class="bash"> yum install -y keepalived</span><br><span class="hljs-keyword">RUN</span><span class="bash"> yum install -y nginx</span><br></code></pre></td></tr></table></figure><p>启动 centos 容器<br>–privileged=true 获取特权<br>/sbin/init：这个地方是实测 /bin/bash，会有权限没有。因为我还实验了下手动加虚拟 ip</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> --name centos_master -itd <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> relengxing/centos:v1 /sbin/init<br>docker <span class="hljs-builtin-name">run</span> --name centos_slave -itd <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> relengxing/centos:v1 /sbin/init<br></code></pre></td></tr></table></figure><p>可以进容器查看 ip 地址</p><p>Master 节点<br><code>ifconfig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">eth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500<br>inet 172.17.0.3 netmask 255.255.0.0 broadcast 172.17.255.255<br>ether 02:42:ac:11:00:03 txqueuelen 0 (Ethernet)<br></code></pre></td></tr></table></figure><p>在容器外则通过 docker network<br>docker network ls<br>docker network inspect d8c58097a4c3</p><p>ifconfig eth0:0 172.17.0.88 netmask 255.255.0.0 up<br>ifconfig eth0:0 down</p><p>修改<code>/etc/keepalived/keepalived.conf</code>的内容</p><p>主节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs conf">! Configuration File for keepalived<br>global_defs &#123;<br>   notification_email &#123;<br>     xuad@xuad.com<br>   &#125;<br>   notification_email_from root@xuad.com<br>   smtp_server mail.xuad.com<br>   smtp_connect_timeout 30<br>   router_id LVS_DEVEL<br>   vrrp_skip_check_adv_addr<br>   vrrp_strict<br>   vrrp_garp_interval 0<br>   vrrp_gna_interval 0<br>&#125;<br><br>vrrp_script chk_nginx &#123;<br>    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;nginx_pid.sh&quot;   # 检查nginx状态的脚本<br>    interval 2<br>    weight 3<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER     #备份服务器上将MASTER改为BACKUP<br>    interface eth0<br>    virtual_router_id 51<br>    priority 101       #备份服务上将100改为小于100，可配置成90<br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        172.17.0.99    #有多个vip可在下面继续增加<br>    &#125;<br>    track_script &#123;<br>        chk_nginx<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>备份节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs conf">! Configuration File for keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>     xuad@xuad.com<br>   &#125;<br>   notification_email_from root@xuad.com<br>   smtp_server mail.xuad.com<br>   smtp_connect_timeout 30<br>   router_id LVS_DEVEL<br>   vrrp_skip_check_adv_addr<br>   vrrp_strict<br>   vrrp_garp_interval 0<br>   vrrp_gna_interval 0<br>&#125;<br><br>vrrp_script chk_nginx &#123;<br>    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;nginx_pid.sh&quot;   # 检查nginx状态的脚本<br>    interval 2<br>    weight 3<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state BACKUP     #备份服务器上将MASTER改为BACKUP<br>    interface eth0<br>    virtual_router_id 51<br>    priority 99       #备份服务上将100改为小于100，可配置成90<br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        172.17.0.99    #有多个vip可在下面继续增加<br>    &#125;<br>    track_script &#123;<br>        chk_nginx<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nginx_pid.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#检测nginx是否存活的脚本</span><br>A=`ps -ef | grep nginx | grep -v grep | wc -l`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ];<span class="hljs-keyword">then</span><br>  nginx<br>  sleep 2<br>  <span class="hljs-keyword">if</span> [ `ps -ef | grep nginx | grep -v grep | wc -l` -eq 0 ];<span class="hljs-keyword">then</span><br>      <span class="hljs-comment">#killall keepalived</span><br>      ps -ef|grep keepalived|grep -v grep|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="hljs-built_in">kill</span> -9<br>  <span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>修改 nginx 显示的页面，我就修改了这一行，标示是主机还是备份机</p><p>主节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-tag">&lt;strong&gt;</span>nginx  <span class="hljs-keyword">master</span> <span class="hljs-title">Node</span><span class="hljs-tag">&lt;/strong&gt;</span> HTTP server after it has been<br><br></code></pre></td></tr></table></figure><p>从节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-tag">&lt;strong&gt;</span>nginx  <span class="hljs-literal">Slave</span> <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;/strong</span>&gt; HTTP server after it has been<br></code></pre></td></tr></table></figure><p>然后在主机运行<br><code>curl 172.17.0.99</code><br>显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">...<br>   &lt;strong&gt;nginx   master Node&lt;&#x2F;strong&gt; HTTP server after it has been<br>...<br><br></code></pre></td></tr></table></figure><p>关闭主节点后<br>然后在主机运行<br><code>curl 172.17.0.99</code><br>显示</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">...<br>   <span class="hljs-tag">&lt;strong&gt;</span>nginx   <span class="hljs-literal">slave</span> <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;/strong</span>&gt; HTTP server after it has been<br>...<br></code></pre></td></tr></table></figure><p>遇到一个问题没有解决</p><p>在主节点运行<br><code>nginx -s stop</code> 推出 nginx 后，没有切换到从节点，必须关闭主节点。</p><p>更新：<br>这个问题看了下<br>是 nginx 检测脚本的问题<br>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 如果进程中没有nginx则将keepalived进程kill掉</span><br>A=`ps -C nginx --no-header |wc -l`      <span class="hljs-comment">## 查看是否有 nginx进程 把值赋给变量A</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ];<span class="hljs-keyword">then</span>                    <span class="hljs-comment">## 如果没有进程值得为 零</span><br>    systemctl stop keepalived.service           <span class="hljs-comment">## 则结束 keepalived 进程</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>成功了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录：在K8S上创建高可用的MySql集群</title>
    <link href="/2019/12/14/%E8%AE%B0%E5%BD%95%EF%BC%9A%E5%9C%A8K8S%E4%B8%8A%E5%88%9B%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84MySql%E9%9B%86%E7%BE%A4/"/>
    <url>/2019/12/14/%E8%AE%B0%E5%BD%95%EF%BC%9A%E5%9C%A8K8S%E4%B8%8A%E5%88%9B%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84MySql%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="更新-2"><a href="#更新-2" class="headerlink" title="更新 2"></a>更新 2</h2><span id="more"></span><p>查看了 kubernetes 的资料和配置<br>Pod CIDR 10.9.12.0/24<br>Pod CIDR 10.9.13.0/24<br>Pod CIDR 10.10.11.0/24</p><p>这里不连续的原因是， Mysql-0 和 Mysql-1 使用的两台机器是常年开着的，没有关闭过<br>而 Mysql-2 使用的机器是刚刚创建的，而我们的集群有个特点，就是频繁的创建和删除节点。 这里猜测 kubernetes 在分配 ip 的时候是顺序分配的,如果分配完了再从头开始分配，把已经释放的重新分配。</p><p>由于我们使用的是 Google kubernetes，很多东西是无法更改的。<br>所以解决方案我认为有：</p><ol><li>重新创建一个 nodepool,把 mysql 部署在这个新创建的 nodepool 上，这样新的机器大概率 IP 连续。</li><li>修改 kubedb 的源码，把白名单的子网掩码修改为/8。其实我觉得这里作者的代码应该优化一下，使用 service 的方式来寻找 pod，而不是通过 Pod IP。</li><li>寻找其他 MySql 高可用部署的解决方案</li></ol><p>我准备就创建一个 nodepool，因为从我的个人实际情况出发，这是最简单有效，最快速的解决方案，然后问题也和提了 issue，希望作者会进行优化。</p><h2 id="更新-1"><a href="#更新-1" class="headerlink" title="更新 1"></a>更新 1</h2><p>问题查了下，看了下作者的更新记录<br><a href="https://github.com/kubedb/mysql/commit/1db0fa511d31f32bf36b4dcdc07733d3853f3d18">https://github.com/kubedb/mysql/commit/1db0fa511d31f32bf36b4dcdc07733d3853f3d18</a><br>关键的几行</p><!--more--><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">myips</span>=$(hostname -I)<br><span class="hljs-attribute">first</span>=<span class="hljs-variable">$&#123;myips%% *&#125;</span><br><span class="hljs-comment"># Now use this IP with CIDR notation</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">whitelist</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;first&#125;</span>/16&quot;</span><br></code></pre></td></tr></table></figure><p>然后我确认了下我的 IP：<br>mysql-0:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">IP</span>:                 <span class="hljs-number">10.9.12.246</span><br></code></pre></td></tr></table></figure><p>mysql-2:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">IP</span>:                 <span class="hljs-number">10.10.11.2</span><br></code></pre></td></tr></table></figure><p>这里 kubernetes 内网 IP 的第二个数不一样，作者的掩码是/16，我这里需要/8<br>我觉得这个问题应该在 kubernetes 这里找解决方案</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>参考文章：<br><a href="https://jeremy-xu.oschina.io/2019/08/kubernetes%E4%B8%AD%E9%83%A8%E7%BD%B2mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/">https://jeremy-xu.oschina.io/2019/08/kubernetes%E4%B8%AD%E9%83%A8%E7%BD%B2mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</a><br><a href="https://kubedb.com/docs/0.12.0/guides/mysql/clustering/overview/">https://kubedb.com/docs/0.12.0/guides/mysql/clustering/overview/</a></p><p>按照博主的文章，确实搭建成功了。但是在后续改进的时候遇到了问题，目前还没有解决，先记录下来，以后解决了再修改。</p><!--more--><p>我使用的是 google 的 kubernetes,这里使用的是一台四核的机器，三个节点全部部署在同一台机器上，上面还有一些其他的服务，基本上单节点分配不到一个核。<br>在另一台单核的 VM 上使用 sysbench 进行测试</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sysbench /usr/share/sysbench/oltp_read_write.lua <span class="hljs-attribute">--time</span>=180 <span class="hljs-attribute">--mysql-host</span>=mysqlip <span class="hljs-attribute">--mysql-port</span>=3306 <span class="hljs-attribute">--mysql-user</span>=root <span class="hljs-attribute">--mysql-password</span>=mysqlmima <span class="hljs-attribute">--mysql-db</span>=demo <span class="hljs-attribute">--table-size</span>=50000 <span class="hljs-attribute">--tables</span>=8 <span class="hljs-attribute">--threads</span>=8 prepare<br><br>sysbench /usr/share/sysbench/oltp_read_write.lua <span class="hljs-attribute">--time</span>=180 <span class="hljs-attribute">--mysql-host</span>=mysqlip <span class="hljs-attribute">--mysql-port</span>=3306 <span class="hljs-attribute">--mysql-user</span>=root <span class="hljs-attribute">--mysql-password</span>=mysqlmima <span class="hljs-attribute">--mysql-db</span>=demo <span class="hljs-attribute">--table-size</span>=50000 <span class="hljs-attribute">--tables</span>=8 <span class="hljs-attribute">--threads</span>=8 <span class="hljs-builtin-name">run</span> &gt;&gt; k8smysql.log<br></code></pre></td></tr></table></figure><p>第一次直接挂了，改小数据量后重新测试得到测试报告</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sysbench</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">19</span> (using bundled LuaJIT <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-beta<span class="hljs-number">2</span>)<br><br><span class="hljs-attribute">Running</span> the test with following options:<br><span class="hljs-attribute">Number</span> of threads: <span class="hljs-number">8</span><br><span class="hljs-attribute">Initializing</span> random number generator from current time<br><br><br><span class="hljs-attribute">Initializing</span> worker threads...<br><br><span class="hljs-attribute">Threads</span> started!<br><br><span class="hljs-attribute">FATAL</span>: mysql_stmt_execute() returned error <span class="hljs-number">2013</span> (Lost connection to MySQL server during query) for query &#x27;SELECT c FROM sbtest<span class="hljs-number">7</span> WHERE id=?&#x27;<br><span class="hljs-attribute">FATAL</span>: `thread_run&#x27; function failed: /usr/share/sysbench/oltp_common.lua:<span class="hljs-number">419</span>: SQL error, errno = <span class="hljs-number">2013</span>, state = &#x27;HY<span class="hljs-number">000</span>&#x27;: Lost connection to MySQL server during query<br><span class="hljs-attribute">sysbench</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">19</span> (using bundled LuaJIT <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-beta<span class="hljs-number">2</span>)<br><br><span class="hljs-attribute">Running</span> the test with following options:<br><span class="hljs-attribute">Number</span> of threads: <span class="hljs-number">8</span><br><span class="hljs-attribute">Initializing</span> random number generator from current time<br><br><br><span class="hljs-attribute">Initializing</span> worker threads...<br><br><span class="hljs-attribute">Threads</span> started!<br><br><span class="hljs-attribute">SQL</span> statistics:<br>    <span class="hljs-attribute">queries</span> performed:<br>        <span class="hljs-attribute">read</span>:                            <span class="hljs-number">310646</span><br>        <span class="hljs-attribute">write</span>:                           <span class="hljs-number">68981</span><br>        <span class="hljs-attribute">other</span>:                           <span class="hljs-number">64143</span><br>        <span class="hljs-attribute">total</span>:                           <span class="hljs-number">443770</span><br>    <span class="hljs-attribute">transactions</span>:                        <span class="hljs-number">22187</span>  (<span class="hljs-number">123</span>.<span class="hljs-number">19</span> per sec.)<br>    <span class="hljs-attribute">queries</span>:                             <span class="hljs-number">443770</span> (<span class="hljs-number">2463</span>.<span class="hljs-number">94</span> per sec.)<br>    <span class="hljs-attribute">ignored</span> errors:                      <span class="hljs-number">2</span>      (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> per sec.)<br>    <span class="hljs-attribute">reconnects</span>:                          <span class="hljs-number">0</span>      (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> per sec.)<br><br><span class="hljs-attribute">General</span> statistics:<br>    <span class="hljs-attribute">total</span> time:                          <span class="hljs-number">180</span>.<span class="hljs-number">1038</span>s<br>    <span class="hljs-attribute">total</span> number of events:              <span class="hljs-number">22187</span><br><br><span class="hljs-attribute">Latency</span> (ms):<br>         <span class="hljs-attribute">min</span>:                                   <span class="hljs-number">22</span>.<span class="hljs-number">81</span><br>         <span class="hljs-attribute">avg</span>:                                   <span class="hljs-number">64</span>.<span class="hljs-number">91</span><br>         <span class="hljs-attribute">max</span>:                                  <span class="hljs-number">370</span>.<span class="hljs-number">94</span><br>         <span class="hljs-attribute">95th</span> percentile:                      <span class="hljs-number">139</span>.<span class="hljs-number">85</span><br>         <span class="hljs-attribute">sum</span>:                              <span class="hljs-number">1440248</span>.<span class="hljs-number">80</span><br><br><span class="hljs-attribute">Threads</span> fairness:<br>    <span class="hljs-attribute">events</span> (avg/stddev):           <span class="hljs-number">2773</span>.<span class="hljs-number">3750</span>/<span class="hljs-number">1495</span>.<span class="hljs-number">23</span><br>    <span class="hljs-attribute">execution</span> time (avg/stddev):   <span class="hljs-number">180</span>.<span class="hljs-number">0311</span>/<span class="hljs-number">0</span>.<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure><p>说实话性能一般，所以准备使用更好的机器继续测试性能，让单个节点使用两个核。</p><p>这一步的时候出问题了，集群起不来。<br>查了一下，发现有人也遇到了同样的问题，作者说解决了，但是我今天实测还是出了这个问题。<br><a href="https://github.com/kubedb/project/issues/529">https://github.com/kubedb/project/issues/529</a><br>目前没有找到很好的解决方案，在 github 上提了新的 issue<br><a href="https://github.com/kubedb/project/issues/702">https://github.com/kubedb/project/issues/702</a><br>希望可以得到解决。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一致性哈希</title>
    <link href="/2019/11/14/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/"/>
    <url>/2019/11/14/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<p>背景这块就简单说一下，一致性哈希是为了解决简单哈希带来的问题。</p><p>以 redis 分布式缓存场景为例<br>有大概一百万张图片要分在 4 台机器上，后来数据量变多了，需要增加一台机器。</p><span id="more"></span><h2 id="简单哈希"><a href="#简单哈希" class="headerlink" title="简单哈希"></a>简单哈希</h2><p>简单哈希的做法是，首先计算哈希值，然后进行取模运算<br><code>hash(图片名称) % N</code><br>那么每张图片都会对应到一台机器上，很好的解决了图片分散存储的问题。</p><p>但是，当我们需要增加一台服务器的时候就出问题了。 取模运算的结果不一样了，在对应的机器上找不到缓存，大量缓存在同一时间失效，造成了缓存的雪崩</p><p>为了解决这个问题，发明了一致性哈希算法。</p><h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2><p>一致性哈希也是取模算法，但是不是对服务器数量，而是对 2^32 取模。<br>为什么是 2^32?<br>因为，java 中 int 的最大值是 2^31-1 最小值是-2^31,2^32 刚好是无符号整形的最大值；</p><p>简单来说，一致性 Hash 算法将整个哈希值空间组织成一个虚拟的圆环，假设某哈希函数 H 的值空间为 0 ～ 2^32-1（即哈希值是一个 32 位无符号整形）<br>哈希算法合理的话，图片应该是大致均匀分布在这个虚拟的圆环上。<br><code>hash(图片名称) % 2^32</code></p><p>同时服务器也需要进行哈希<br><code>hash（服务器A的IP地址） % 2^32</code></p><p>图片和服务器都哈希取模完后，就能确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器</p><p>假设此时有 C 服务器发生故障，那么原 B~C 的数据会重新定位到 D 服务器，其他服务器的数据则不受影响。<br>增加一台一起也是一样，只有一部分内容会受到影响。具有较好的容错性和可扩展性。</p><h3 id="一致性哈希的其他问题及解决方案"><a href="#一致性哈希的其他问题及解决方案" class="headerlink" title="一致性哈希的其他问题及解决方案"></a>一致性哈希的其他问题及解决方案</h3><h4 id="数据倾斜问题"><a href="#数据倾斜问题" class="headerlink" title="数据倾斜问题"></a>数据倾斜问题</h4><p>数据倾斜问题指的是，当服务器进行哈希取模的时候，没有平均分配到数据环上。比如 ABCD 全都在右半区，那么 A 节点受到的压力会是最大的，其他节点受到的压力会小一些。<br>解决方案是 增加虚拟节点：<br>即 对每一个节点计算多个哈希值。<br>在实际应用中，通常将虚拟节点数设置为 32 甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p><p>怎么计算出多个节点<br><code>Hash(192.168.1.1#1”); // cache A1</code><br><code>Hash(192.168.1.1#2”); // cache A2</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>哈希</tag>
      
      <tag>一致性哈希</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派3搭建linux服务器</title>
    <link href="/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>前段时间租了三个月阿里云，感觉太贵了，就买了个树莓派 3，准备搭建一个 linux 操作系统，当服务器用用，大概花费不到 300。电源 5V×2.5A，一般情况下不用这么高的电流，功耗其实很低的。</p><span id="more"></span><p>组装就不说了。。成品如下<br><img src="/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%A0%91%E8%8E%93%E6%B4%BE.jpeg" alt="树莓派"><br>几个要下载的东西:<br>链接：<a href="http://pan.baidu.com/s/1o8FC0xO">http://pan.baidu.com/s/1o8FC0xO</a> 密码：psww<br>这个是系统<br><img src="/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/UbuntuServer.jpg" alt="系统"><br>把他解压出来是一个.img 文件。</p><p>这个软件安装一下。<br><code>Win32DiskImager-0.9.5-install.exe</code><br>内存卡，读卡器准备好</p><p>然后就写到系统里面<br><img src="/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%AD%A5%E9%AA%A4.jpg" alt="步骤"></p><p>写完以后就可以插到树莓派上了，网线端接路由器的 LAN 口，电脑和树莓派在同一个局域网下。<br>上电，等开好机</p><p>在路由器管理页面下可以找到<br>我的是 192.168.0.104</p><p>然后就可以用 xshell 连接了<br><img src="/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/Xshell%E8%BF%9E%E6%8E%A5.jpg" alt="Xshell连接"><br><img src="/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%99%BB%E5%BD%95.jpg" alt="登录"><br>然后就登录成功了<br>我这里是用有线连接的，无线的没有去做了<br><img src="/2019/10/24/%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.jpg" alt="成功"><br>OK,大功告成，然后可以开始装各种软件的开发环境了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReBus</title>
    <link href="/2017/09/08/ReBus/"/>
    <url>/2017/09/08/ReBus/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>ReBus 是一个模仿 RxBus 写的，基于 reactor3 的事件总线</p><span id="more"></span><p>RxBus 一般是 Android 端使用的，<br>ReBus 一般是后端使用的<br>RxBus 参考链接： <a href="https://github.com/relengxing/RxBus">https://github.com/relengxing/RxBus</a><br>ReBus 源码链接： <a href="https://github.com/relengxing/ReBus">https://github.com/relengxing/ReBus</a></p><p>推荐直接看 RxBus 的解析，这边只贴代码，因为思想是一模一样的，只是底层的包不一样，封装完后用法也是一样的。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>ReBus 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.relenxing.config;<br><span class="hljs-keyword">import</span> com.relenxing.domain.Event;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Flux;<br><span class="hljs-keyword">import</span> reactor.core.publisher.ReplayProcessor;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReBus</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事件总线的核心。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReplayProcessor&lt;Event&gt; bus;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数，初始化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ReBus</span><span class="hljs-params">()</span> </span>&#123;<br>        bus = ReplayProcessor.create();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例模式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReBus <span class="hljs-title">getDefault</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> HelperHolder.instance;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 延迟初始化，这里是利用了 Java 的语言特性，内部类只有在使用的时候，才会去加载，</span><br><span class="hljs-comment">     * 从而初始化内部静态变量。关于线程安全，这是 Java 运行环境自动给你保证的，</span><br><span class="hljs-comment">     * 在加载的时候，会自动隐形的同步。在访问对象的时候，</span><br><span class="hljs-comment">     * 不需要同步 Java 虚拟机又会自动给你取消同步，所以效率非常高。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelperHolder</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ReBus instance = <span class="hljs-keyword">new</span> ReBus();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送普通事件</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">post</span><span class="hljs-params">(Event event)</span></span>&#123;<br>        bus.onNext(event);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  Flux&lt;Event&gt; <span class="hljs-title">on</span><span class="hljs-params">(String type)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> bus.filter(e -&gt; e.getEventName().equals(type));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Event 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.relenxing.domain;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String eventName;<br><br>    <span class="hljs-keyword">private</span> T event;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Event</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Event</span><span class="hljs-params">(String eventName, T event)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.eventName = eventName;<br>        <span class="hljs-keyword">this</span>.event = event;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEventName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> eventName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEventName</span><span class="hljs-params">(String eventName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.eventName = eventName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getEvent</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> event;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEvent</span><span class="hljs-params">(T event)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.event = event;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.relenxing;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       ReBus.getDefault().post(<span class="hljs-keyword">new</span> Event&lt;&gt;(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>));<br>       ReBus.getDefault().post(<span class="hljs-keyword">new</span> Event&lt;&gt;(<span class="hljs-string">&quot;456&quot;</span>, <span class="hljs-string">&quot;swdw&quot;</span>));<br>       ReBus.getDefault().post(<span class="hljs-keyword">new</span> Event&lt;&gt;(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;312&quot;</span>));<br>       ReBus.getDefault().post(<span class="hljs-keyword">new</span> Event&lt;&gt;(<span class="hljs-string">&quot;456&quot;</span>, <span class="hljs-string">&quot;2f2&quot;</span>));<br>       ReBus.getDefault().post(<span class="hljs-keyword">new</span> Event&lt;&gt;(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;12f&quot;</span>));<br><br>       ReBus.getDefault().on(<span class="hljs-string">&quot;123&quot;</span>).map(Event::getEvent).subscribe(System.out::println);<br>       ReBus.getDefault().on(<span class="hljs-string">&quot;456&quot;</span>).map(Event::getEvent).subscribe(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxBus</title>
    <link href="/2016/08/13/RxBus/"/>
    <url>/2016/08/13/RxBus/</url>
    
    <content type="html"><![CDATA[<p>参考：用 RxJava 实现事件总线(Event Bus)<br><a href="http://www.jianshu.com/p/ca090f6e2fe2">http://www.jianshu.com/p/ca090f6e2fe2</a></p><p>我这篇基本上就是按照上面那篇写的，对 Sticky 那一块进行了一些修改。<br>写下来让自己记得更深刻。这篇文章面向有 RxJava 基础的人，要是 HelloWorld 都没写过建议先看基础部分。</p><span id="more"></span><p>Git 地址：<br><a href="https://github.com/relengxing/RxBus">https://github.com/relengxing/RxBus</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>新建工程</li><li>添加 rxjava 和 rxandroid 依赖</li><li>完成以下界面</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/2188564-7ecf70697afbb76e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面"></p><ol start="4"><li>编写 RxBus 文件</li><li>编写其他代码</li></ol><hr><p>RxBus 是一个全局使用的总线，应该使用单例模式。<br>单例模式的具体写法可以自己研究下。<br>参考代码：<br><a href="http://www.race604.com/java-double-checked-singleton/">http://www.race604.com/java-double-checked-singleton/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by relengxing on 2016/8/12.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RxBus</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">RxBus</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RxBus <span class="hljs-title">getDefault</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> HelperHolder.instance;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelperHolder</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> RxBus instance = <span class="hljs-keyword">new</span> RxBus();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h3><p>那么需要一根总线来传输数据。<br>这根总线就是 RxJava 中的 Subject。</p><blockquote><p>Subject 可以看成是一个桥梁或者代理，在某些 ReactiveX 实现中（ 如 RxJava） ，<strong>它同时充当了 Observer 和 Observable 的角色</strong>。因为它是一个 Observer，它可以订阅一个或多个 Observable；又因为它是一个 Observable，它可以转发它收到(Observe)的数据，也可以发射新的数据。</p></blockquote><p>在 RxJava 中<br>针对不同的场景一共有四种类型的 Subject。</p><ul><li>AsyncSubject</li><li>BehaviorSubject</li><li>PublishSubject</li><li>ReplaySubject<br>关于这四种类型的具体说明参考：<a href="http://www.jianshu.com/p/d382c3f862d5">RxJava：Subject 介绍</a></li></ul><p>这里使用的是 PublishSubject<br>PublishSubject：只会把在订阅发生的时间点之后来自原始 Observable 的数据发射给观察者；<br>又因为线程安全的问题，需要把 PublishSubject 转化为一个线程安全的 Subject，这部分内容也在<a href="http://www.jianshu.com/p/d382c3f862d5">RxJava：Subject 介绍</a>最后一部分串行化中有介绍。<br>最后代码写成如下：</p><pre><code>private final Subject&lt;Object,Object&gt; bus;private RxBus() &#123;    bus = new SerializedSubject&lt;&gt;(PublishSubject.create());&#125;</code></pre><p>总线有了，还差事件发布者（被观察者）和事件接受者（观察者）。</p><h3 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h3><p>将事件 post 至 Subject，此时 Subject 作为 Observer 接收到事件（onNext），然后会发射给所有订阅该 Subject 的订阅者。<br>因为使用的是 PublishSubject，所以必须先订阅事件再发送事件才能介绍到，否则这些发送的事件会遗失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">post</span><span class="hljs-params">(Object object)</span></span>&#123;<br>    bus.onNext(object);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接收事件"><a href="#接收事件" class="headerlink" title="接收事件"></a>接收事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">Observable&lt;T&gt; <span class="hljs-title">toObservable</span><span class="hljs-params">(Class&lt;T&gt; eventType)</span></span>&#123;<br>   <span class="hljs-keyword">return</span> bus.ofType(eventType);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ofType 是 filter 操作符的一个特殊形式。它过滤一个 Observable 只返回指定类型的数据。ofType 默认不在任何特定的调度器上指定 。</p></blockquote><p>有一点需要注意的是，在接收事件的地方不需要接收事件或者生命周期结束的时候一定要取消订阅，防止内存泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!rxSubscription2.isUnsubscribed()) &#123;<br>    rxSubscription2.unsubscribe();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="支持-Sticky-事件"><a href="#支持-Sticky-事件" class="headerlink" title="支持 Sticky 事件"></a>支持 Sticky 事件</h1><blockquote><p>在 Android 开发中，Sticky 事件只指事件消费者在事件发布之后才注册的也能接收到该事件的特殊类型。Android 中就有这样的实例，也就是 Sticky Broadcast，即粘性广播。正常情况下如果发送者发送了某个广播，而接收者在这个广播发送后才注册自己的 Receiver，这时接收者便无法接收到刚才的广播，为此 Android 引入了 StickyBroadcast，在广播发送结束后会保存刚刚发送的广播（Intent），这样当接收者注册完 Receiver 后就可以接收到刚才已经发布的广播。这就使得我们可以预先处理一些事件，让有消费者时再把这些事件投递给消费者。</p></blockquote><p>参考：<a href="http://www.jianshu.com/p/71ab00a2677b">深入 RxBus：［支持 Sticky 事件］</a></p><p>关于方案选择不再详述了，参考上面的链接。<br>同样使用的是 ConcurrentHashMap<br>参考资料中使用的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; mStickyEventMap;<br></code></pre></td></tr></table></figure><p>那么同一个类只会有一个对象保留，后面发送的对象会把前面的对象覆盖掉。<br>而我希望一个新的对象不会覆盖老的对象，需要自己手动来删除。<br>所以这个地方改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;Class&lt;?&gt;,List&lt;Object&gt;&gt; map;<br></code></pre></td></tr></table></figure><p>Sticky 事件和普通事件使用的是同一个 Bus,所以接收者接收的是同一个对象时，当他们都订阅了事件时是没有区别的。</p><h3 id="发送-Sticky-事件"><a href="#发送-Sticky-事件" class="headerlink" title="发送 Sticky 事件"></a>发送 Sticky 事件</h3><p>这个其实就是在发送普通时间之前把这个事件写入到刚刚的 map 中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postSticky</span><span class="hljs-params">(Object object)</span></span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (mStickyEventMap)&#123;<br>        List list = mStickyEventMap.get(object.getClass());<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-keyword">null</span>) &#123;<br>            list = <span class="hljs-keyword">new</span> ArrayList();<br>       &#125;<br>        list.add(object);<br>        mStickyEventMap.put(object.getClass(),list);<br>    &#125;<br>    post(object);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接收-Sticky-事件"><a href="#接收-Sticky-事件" class="headerlink" title="接收 Sticky 事件"></a>接收 Sticky 事件</h3><p>这个就是先查看 map 中是否有这个事件，有的话使用.merginWith 一起发出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">Observable&lt;T&gt; <span class="hljs-title">toObservableSticky</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;T&gt; eventType)</span></span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (mStickyEventMap)&#123;<br>        Observable&lt;T&gt; observable = bus.ofType(eventType);<br>        <span class="hljs-keyword">final</span> List list =  mStickyEventMap.get(eventType);<br>        <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span> &amp;&amp; !list.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> observable.mergeWith(Observable.create(<span class="hljs-keyword">new</span> Observable.OnSubscribe&lt;T&gt;()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; subscriber)</span> </span>&#123;<br>                  <span class="hljs-keyword">for</span> (Object obj :list) &#123;<br>                      subscriber.onNext(eventType.cast(obj));<br>                &#125;<br>            &#125;<br>        &#125;));<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> observable;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还写了一些常用方法，例如 post 一个事件的时候覆盖同类事件，接收事件时消耗掉事件，代码在简书上写起来还是有点麻烦，详情看 GitHub，地址：<a href="https://github.com/relengxing/RxBus">https://github.com/relengxing/RxBus</a><br>要使用的时候把 RxBus 文件直接复制到工程即可。<br>如果有 BUG 可以在评论区告诉我。</p><p><img src="http://upload-images.jianshu.io/upload_images/2188564-c8fdc8129972449b.gif?imageMogr2/auto-orient/strip" alt="动画图"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>rxjava</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
